<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【MSFL】1：A-LOAM：从安装到测试</title>
    <url>/2024/12/24/%E3%80%90MSFL%E3%80%911%EF%BC%9AA-LOAM%EF%BC%9A%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1、安装依赖项"><a href="#1、安装依赖项" class="headerlink" title="1、安装依赖项"></a>1、安装依赖项</h2><ul>
<li>参考之前的博客：【安装学习】ubuntu20.04与A-LOAM：01-安装ceres-solver</li>
<li>注意！仅需顺序执行之前博客操作即可，不需要自行再次源码安装诸如eigen3之类的软件包（通过<code>sudo apt-get</code>安装即可）</li>
</ul>
<h2 id="2、修改代码内容"><a href="#2、修改代码内容" class="headerlink" title="2、修改代码内容"></a>2、修改代码内容</h2><ul>
<li>将四个<code>.cpp</code>文件中的<code>/camera_init</code>修改为<code>camera_init</code></li>
<li>将<code>scanRegistration.cpp中的 #include &lt;opencv/cv.h&gt;</code> 修改为<code>#include &lt;opencv2/imgproc.hpp&gt;</code></li>
<li>修改<code>kittiHelper.cpp</code>中 <code>CV_LOAD_IMAGE_GRAYSCALE</code>为 <code>cv::IMREAD_GRAYSCALE</code></li>
<li>无论之前是否已经<code>catkin_make</code>编译过，都需要重新编译，即删除<code>build/</code>和<code>devel/</code>文件夹后重新执行<code>catkin_make</code>以使上方的<code>ceres</code>库生效</li>
<li>若版本是<code>ubuntu20.04 ros-noetic</code>，也可以使用我修改后的fork仓库：<a href="https://github.com/QianYuan1437/A-LOAM-NOTED.git">https://github.com/QianYuan1437/A-LOAM-NOTED.git</a> 注意branch</li>
</ul>
<h2 id="3、测试与保存"><a href="#3、测试与保存" class="headerlink" title="3、测试与保存"></a>3、测试与保存</h2><ul>
<li>下载测试<code>ROSBAG</code>：<a href="https://drive.google.com/file/d/1s05tBQOLNEDDurlg48KiUWxCp-YqYyGH/view">https://drive.google.com/file/d/1s05tBQOLNEDDurlg48KiUWxCp-YqYyGH/view</a></li>
<li>开启三个终端：注意运行顺序，先1再2最后3<ul>
<li>1、<code>roscore</code></li>
<li>2、<code>roslaunch aloam_velodyne aloam_velodyne_VLP_16.launch</code></li>
<li>3、<code>rosbag play nsh_indoor_outdoor.bag</code></li>
</ul>
</li>
<li>如果需要保存点云信息，则需开启第四个终端<ul>
<li>4、有以下两种方法，但注意运行顺序为1,2,4,3<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#另起终端用bag_to_pcd方法保存点云图</span><br><span class="line">rosrun pcl_ros bag_to_pcd xxx.bag /laser_cloud_surround pcd</span><br></pre></td></tr></table></figure>
运行结束，可以看到生成了一个pcd文件夹，将里面的文件按照修改时间排序，最新的就是最后的点云地图pcd文件。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#另起终端，用pointcloud_to_pcd方法保存点云图</span><br><span class="line">mkdir pcd</span><br><span class="line">cd pcd</span><br><span class="line">rosrun pcl_ros pointcloud_to_pcd input:=/laser_cloud_surround</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>点云地图查看：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcl_viewer xxx.pcd</span><br></pre></td></tr></table></figure>
pcd点云地图转ply格式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcl_pcd2ply xxx.pcd xxxxxxx.ply</span><br></pre></td></tr></table></figure>
当我们需要用第三方软件（MatLab&#x2F;MeshLab）对点云地图进行处理时就需要将pcd转为ply，其中MeshLab必须使用由pointcloud_to_pcd方法创建pcd转成的ply格式点云！</li>
</ul>
<h2 id="4、参考链接"><a href="#4、参考链接" class="headerlink" title="4、参考链接"></a>4、参考链接</h2><ul>
<li><a href="https://blog.csdn.net/studentu/article/details/119634149">https://blog.csdn.net/studentu/article/details/119634149</a></li>
<li><a href="https://blog.csdn.net/weixin_43910370/article/details/120736760">https://blog.csdn.net/weixin_43910370/article/details/120736760</a></li>
<li><a href="https://blog.csdn.net/weixin_43807148/article/details/113739347">https://blog.csdn.net/weixin_43807148/article/details/113739347</a></li>
<li><a href="https://blog.csdn.net/weixin_44156680/article/details/117705830">https://blog.csdn.net/weixin_44156680/article/details/117705830</a></li>
</ul>
<h2 id="5、MSFL测试参考链接"><a href="#5、MSFL测试参考链接" class="headerlink" title="5、MSFL测试参考链接"></a>5、MSFL测试参考链接</h2><ul>
<li><a href="https://blog.csdn.net/qq_53004665/article/details/141674630">https://blog.csdn.net/qq_53004665/article/details/141674630</a></li>
</ul>
]]></content>
      <categories>
        <category>MSFL</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>MSFL</tag>
        <tag>A-LOAM</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】Conda换源</title>
    <url>/2025/05/03/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91Linux%20Conda%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<h2 id="一、换源-Conda-镜像源方法"><a href="#一、换源-Conda-镜像源方法" class="headerlink" title="一、换源 Conda 镜像源方法"></a>一、换源 Conda 镜像源方法</h2><h3 id="1-创建或修改-condarc-文件"><a href="#1-创建或修改-condarc-文件" class="headerlink" title="1. 创建或修改 .condarc 文件"></a>1. 创建或修改 <code>.condarc</code> 文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.condarc</span><br></pre></td></tr></table></figure>

<p>将内容替换为以下格式 (以 <strong>清华源</strong> 为例):</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">defaults</span></span><br><span class="line"><span class="attr">show_channel_urls:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>建议保留 <code>defaults</code> 作为备用源</p>
</blockquote>
<hr>
<h2 id="二、常用镜像源列表"><a href="#二、常用镜像源列表" class="headerlink" title="二、常用镜像源列表"></a>二、常用镜像源列表</h2><table>
<thead>
<tr>
<th>镜像站</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>清华大</td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/</a></td>
</tr>
<tr>
<td>中科大</td>
<td><a href="https://mirrors.ustc.edu.cn/anaconda/">https://mirrors.ustc.edu.cn/anaconda/</a></td>
</tr>
<tr>
<td>阿里云</td>
<td><a href="https://mirrors.aliyun.com/anaconda/">https://mirrors.aliyun.com/anaconda/</a></td>
</tr>
<tr>
<td>华为云</td>
<td><a href="https://repo.huaweicloud.com/anaconda/">https://repo.huaweicloud.com/anaconda/</a></td>
</tr>
</tbody></table>
<p>以中科大镜像为例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">channels:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://mirrors.ustc.edu.cn/anaconda/pkgs/r/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">defaults</span></span><br><span class="line"><span class="attr">show_channel_urls:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="三、更新-Conda-缓存"><a href="#三、更新-Conda-缓存" class="headerlink" title="三、更新 Conda 缓存"></a>三、更新 Conda 缓存</h2><p>换源后建议清除并更新缓存:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda clean -i  <span class="comment"># 清除索引缓存</span></span><br><span class="line">conda update conda</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="四、配置-Conda-Forge-镜像-可选"><a href="#四、配置-Conda-Forge-镜像-可选" class="headerlink" title="四、配置 Conda Forge 镜像 (可选)"></a>四、配置 Conda Forge 镜像 (可选)</h2><p>如你使用 <code>conda-forge</code> 频道，也可配置为国内镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>Conda</tag>
        <tag>镜像源</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】ROS仿真中TF_REPEATED_DATA错误解决方案</title>
    <url>/2025/07/04/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91ROS%20TF_REPEATED_DATA%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在ROS Noetic中仿真两轮差速小车时，出现以下错误信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Warning: TF_REPEATED_DATA ignoring data with redundant timestamp for frame omni_b_link (parent car_base_link) at time 1488.072000 according to authority unknown_publisher</span><br><span class="line">Warning: TF_REPEATED_DATA ignoring data with redundant timestamp for frame omni_f_link (parent car_base_link) at time 1488.072000 according to authority unknown_publisher</span><br><span class="line">Warning: TF_REPEATED_DATA ignoring data with redundant timestamp for frame wheel_l_link (parent car_base_link) at time 1488.072000 according to authority unknown_publisher</span><br><span class="line">Warning: TF_REPEATED_DATA ignoring data with redundant timestamp for frame wheel_r_link (parent car_base_link) at time 1488.072000 according to authority unknown_publisher</span><br></pre></td></tr></table></figure>

<p>同时发现：</p>
<ul>
<li><code>/gazebo</code>发布odom到base_footprint的频率为101.099Hz</li>
<li><code>/robot_state_publisher</code>发布后续tf的频率为1000.00Hz</li>
</ul>
<h2 id="问题根本原因"><a href="#问题根本原因" class="headerlink" title="问题根本原因"></a>问题根本原因</h2><h3 id="TF-REPEATED-DATA错误原因"><a href="#TF-REPEATED-DATA错误原因" class="headerlink" title="TF_REPEATED_DATA错误原因"></a>TF_REPEATED_DATA错误原因</h3><p>该错误表明有多个发布者在相同时间戳为相同的tf变换发布数据，导致数据冲突。具体原因：</p>
<ol>
<li><strong>多个控制器冲突</strong>：<code>gazebo_ros_diff_drive</code>插件和<code>gazebo_ros_control</code>插件同时控制相同的关节</li>
<li><strong>重复的tf发布</strong>：两个插件都在发布相同关节的tf变换</li>
<li><strong>频率不匹配</strong>：不同发布者的更新频率不一致</li>
</ol>
<h3 id="Transmission配置的作用"><a href="#Transmission配置的作用" class="headerlink" title="Transmission配置的作用"></a>Transmission配置的作用</h3><p><strong>Transmission</strong>是ROS控制系统中定义执行器与关节连接关系的配置：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;wheel_l_trans&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;wheel_l_joint&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/VelocityJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;wheel_l_motor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/VelocityJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>工作流程</strong>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令输入 → 控制器 → 传动系统 → 执行器 → 关节 → 链接运动</span><br><span class="line">cmd_vel → diff_drive → transmission → motor → joint → link</span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一：使用gazebo-ros-diff-drive（推荐用于简单差分驱动）"><a href="#方案一：使用gazebo-ros-diff-drive（推荐用于简单差分驱动）" class="headerlink" title="方案一：使用gazebo_ros_diff_drive（推荐用于简单差分驱动）"></a>方案一：使用gazebo_ros_diff_drive（推荐用于简单差分驱动）</h3><p><strong>1. 删除gazebo_ros_control插件</strong></p>
<p>在主URDF文件中注释或删除：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除这部分配置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;gazebo&gt;</span></span><br><span class="line"><span class="comment">    &lt;plugin name=&quot;gazebo_ros_control&quot; filename=&quot;libgazebo_ros_control.so&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;robotNamespace&gt;/zeus_s1&lt;/robotNamespace&gt;</span></span><br><span class="line"><span class="comment">        &lt;robotParam&gt;robot_description&lt;/robotParam&gt;</span></span><br><span class="line"><span class="comment">        &lt;robotSimType&gt;gazebo_ros_control/DefaultRobotHWSim&lt;/robotSimType&gt;</span></span><br><span class="line"><span class="comment">        &lt;legacyModeNS&gt;true&lt;/legacyModeNS&gt;</span></span><br><span class="line"><span class="comment">    &lt;/plugin&gt;</span></span><br><span class="line"><span class="comment">&lt;/gazebo&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>2. 优化gazebo_ros_diff_drive配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_diff_drive.so&quot;</span> <span class="attr">name</span>=<span class="string">&quot;differential_drive_controller&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rosDebugLevel</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">rosDebugLevel</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">publishWheelTF</span>&gt;</span>false<span class="tag">&lt;/<span class="name">publishWheelTF</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">publishTf</span>&gt;</span>1<span class="tag">&lt;/<span class="name">publishTf</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">publishOdomTF</span>&gt;</span>1<span class="tag">&lt;/<span class="name">publishOdomTF</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">odometrySource</span>&gt;</span>world<span class="tag">&lt;/<span class="name">odometrySource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">publishWheelJointState</span>&gt;</span>true<span class="tag">&lt;/<span class="name">publishWheelJointState</span>&gt;</span>  <span class="comment">&lt;!-- 改为true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">alwaysOn</span>&gt;</span>true<span class="tag">&lt;/<span class="name">alwaysOn</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updateRate</span>&gt;</span>50.0<span class="tag">&lt;/<span class="name">updateRate</span>&gt;</span>  <span class="comment">&lt;!-- 与robot_state_publisher同步 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legacyMode</span>&gt;</span>true<span class="tag">&lt;/<span class="name">legacyMode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">leftJoint</span>&gt;</span>wheel_l_joint<span class="tag">&lt;/<span class="name">leftJoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rightJoint</span>&gt;</span>wheel_r_joint<span class="tag">&lt;/<span class="name">rightJoint</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wheelSeparation</span>&gt;</span>0.33<span class="tag">&lt;/<span class="name">wheelSeparation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wheelDiameter</span>&gt;</span>0.125<span class="tag">&lt;/<span class="name">wheelDiameter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">broadcastTF</span>&gt;</span>1<span class="tag">&lt;/<span class="name">broadcastTF</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wheelTorque</span>&gt;</span>6.5<span class="tag">&lt;/<span class="name">wheelTorque</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">wheelAcceleration</span>&gt;</span>0.5<span class="tag">&lt;/<span class="name">wheelAcceleration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commandTopic</span>&gt;</span>cmd_vel<span class="tag">&lt;/<span class="name">commandTopic</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">odometryFrame</span>&gt;</span>odom<span class="tag">&lt;/<span class="name">odometryFrame</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">odometryTopic</span>&gt;</span>odom<span class="tag">&lt;/<span class="name">odometryTopic</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">robotBaseFrame</span>&gt;</span>base_footprint<span class="tag">&lt;/<span class="name">robotBaseFrame</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 删除wheel的transmission配置</strong></p>
<p>在wheel_125mm.xacro中注释：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 删除或注释掉wheel的transmission --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;transmission name=&quot;$&#123;wheel_prefix&#125;_wheel_trans&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;type&gt;transmission_interface/SimpleTransmission&lt;/type&gt;</span></span><br><span class="line"><span class="comment">    &lt;joint name=&quot;$&#123;wheel_prefix&#125;_joint&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;hardwareInterface&gt;hardware_interface/VelocityJointInterface&lt;/hardwareInterface&gt;</span></span><br><span class="line"><span class="comment">    &lt;/joint&gt;</span></span><br><span class="line"><span class="comment">    &lt;actuator name=&quot;$&#123;wheel_prefix&#125;_wheel_motor&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;hardwareInterface&gt;hardware_interface/VelocityJointInterface&lt;/hardwareInterface&gt;</span></span><br><span class="line"><span class="comment">        &lt;mechanicalReduction&gt;1&lt;/mechanicalReduction&gt;</span></span><br><span class="line"><span class="comment">    &lt;/actuator&gt;</span></span><br><span class="line"><span class="comment">&lt;/transmission&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 调整robot_state_publisher频率</strong></p>
<p>在launch文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">type</span>=<span class="string">&quot;robot_state_publisher&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;publish_frequency&quot;</span> <span class="attr">type</span>=<span class="string">&quot;double&quot;</span> <span class="attr">value</span>=<span class="string">&quot;50.0&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="方案二：使用gazebo-ros-control（适用于复杂控制需求）"><a href="#方案二：使用gazebo-ros-control（适用于复杂控制需求）" class="headerlink" title="方案二：使用gazebo_ros_control（适用于复杂控制需求）"></a>方案二：使用gazebo_ros_control（适用于复杂控制需求）</h3><p><strong>1. 删除gazebo_ros_diff_drive插件</strong></p>
<p><strong>2. 修改gazebo_ros_control配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gazebo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">name</span>=<span class="string">&quot;gazebo_ros_control&quot;</span> <span class="attr">filename</span>=<span class="string">&quot;libgazebo_ros_control.so&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">robotNamespace</span>&gt;</span>/<span class="tag">&lt;/<span class="name">robotNamespace</span>&gt;</span>  <span class="comment">&lt;!-- 移除zeus_s1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">robotParam</span>&gt;</span>robot_description<span class="tag">&lt;/<span class="name">robotParam</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">robotSimType</span>&gt;</span>gazebo_ros_control/DefaultRobotHWSim<span class="tag">&lt;/<span class="name">robotSimType</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legacyModeNS</span>&gt;</span>true<span class="tag">&lt;/<span class="name">legacyModeNS</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">updateRate</span>&gt;</span>50.0<span class="tag">&lt;/<span class="name">updateRate</span>&gt;</span>  <span class="comment">&lt;!-- 添加更新频率 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">gazebo</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 修正transmission配置</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transmission</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;wheel_prefix&#125;_wheel_trans&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>transmission_interface/SimpleTransmission<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">joint</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;wheel_prefix&#125;_joint&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/VelocityJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">joint</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">actuator</span> <span class="attr">name</span>=<span class="string">&quot;$&#123;wheel_prefix&#125;_wheel_motor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hardwareInterface</span>&gt;</span>hardware_interface/VelocityJointInterface<span class="tag">&lt;/<span class="name">hardwareInterface</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mechanicalReduction</span>&gt;</span>1<span class="tag">&lt;/<span class="name">mechanicalReduction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">actuator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transmission</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4. 添加控制器配置</strong></p>
<p>在launch文件中：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find zeus_s1_description)/config/control.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;controller_spawner&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;controller_manager&quot;</span> <span class="attr">type</span>=<span class="string">&quot;spawner&quot;</span> <span class="attr">respawn</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span> <span class="attr">args</span>=<span class="string">&quot;joint_state_controller diff_drive_controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>control.yaml文件内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Joint state controller</span></span><br><span class="line"><span class="attr">joint_state_controller:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">joint_state_controller/JointStateController</span></span><br><span class="line">  <span class="attr">publish_rate:</span> <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Differential drive controller</span></span><br><span class="line"><span class="attr">diff_drive_controller:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">diff_drive_controller/DiffDriveController</span></span><br><span class="line">  <span class="attr">left_wheel:</span> <span class="string">&#x27;wheel_l_joint&#x27;</span></span><br><span class="line">  <span class="attr">right_wheel:</span> <span class="string">&#x27;wheel_r_joint&#x27;</span></span><br><span class="line">  <span class="attr">publish_rate:</span> <span class="number">50</span></span><br><span class="line">  <span class="attr">pose_covariance_diagonal:</span> [<span class="number">0.001</span>, <span class="number">0.001</span>, <span class="number">1000000.0</span>, <span class="number">1000000.0</span>, <span class="number">1000000.0</span>, <span class="number">1000.0</span>]</span><br><span class="line">  <span class="attr">twist_covariance_diagonal:</span> [<span class="number">0.001</span>, <span class="number">0.001</span>, <span class="number">1000000.0</span>, <span class="number">1000000.0</span>, <span class="number">1000000.0</span>, <span class="number">1000.0</span>]</span><br><span class="line">  <span class="attr">wheel_separation:</span> <span class="number">0.33</span></span><br><span class="line">  <span class="attr">wheel_radius:</span> <span class="number">0.0625</span></span><br><span class="line">  <span class="attr">base_frame_id:</span> <span class="string">base_footprint</span></span><br><span class="line">  <span class="attr">odom_frame_id:</span> <span class="string">odom</span></span><br></pre></td></tr></table></figure>

<h2 id="调试和验证方法"><a href="#调试和验证方法" class="headerlink" title="调试和验证方法"></a>调试和验证方法</h2><h3 id="检查TF发布状态"><a href="#检查TF发布状态" class="headerlink" title="检查TF发布状态"></a>检查TF发布状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看TF树结构</span></span><br><span class="line">rosrun tf view_frames</span><br><span class="line">evince frames.pdf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控特定TF变换</span></span><br><span class="line">rosrun tf tf_monitor odom base_footprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看TF变换关系</span></span><br><span class="line">rosrun tf tf_echo odom base_footprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查当前运行的节点</span></span><br><span class="line">rosnode list | grep -E <span class="string">&quot;(robot_state_publisher|gazebo)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tf话题内容</span></span><br><span class="line">rostopic <span class="built_in">echo</span> /tf | grep frame_id</span><br></pre></td></tr></table></figure>

<h3 id="验证关节状态发布"><a href="#验证关节状态发布" class="headerlink" title="验证关节状态发布"></a>验证关节状态发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看关节状态话题</span></span><br><span class="line">rostopic <span class="built_in">echo</span> /joint_states</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查话题发布频率</span></span><br><span class="line">rostopic hz /joint_states</span><br><span class="line">rostopic hz /tf</span><br></pre></td></tr></table></figure>

<h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><h3 id="何时使用Transmission配置"><a href="#何时使用Transmission配置" class="headerlink" title="何时使用Transmission配置"></a>何时使用Transmission配置</h3><p><strong>需要使用的场景</strong>：</p>
<ul>
<li>复杂控制需求（PID调节、轨迹跟踪）</li>
<li>多种控制模式切换（位置、速度、力矩）</li>
<li>存在机械减速的真实情况</li>
<li>自定义控制器开发</li>
<li>多关节协调控制（如机械臂）</li>
</ul>
<p><strong>不需要使用的场景</strong>：</p>
<ul>
<li>简单差分驱动机器人</li>
<li>固定关节连接</li>
<li>基础仿真演示</li>
</ul>
<h3 id="频率同步建议"><a href="#频率同步建议" class="headerlink" title="频率同步建议"></a>频率同步建议</h3><ol>
<li><strong>统一更新频率</strong>：将所有相关组件设置为相同频率（推荐50-100Hz）</li>
<li><strong>避免过高频率</strong>：1000Hz通常不必要，会增加计算负担</li>
<li><strong>渐进调试</strong>：从低频率开始，逐步优化</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于简单的差分驱动机器人仿真，<strong>推荐使用方案一</strong>（gazebo_ros_diff_drive），因为：</p>
<ol>
<li><strong>配置简单</strong>：无需复杂的transmission和控制器配置</li>
<li><strong>功能完整</strong>：自动处理差分驱动逻辑和里程计</li>
<li><strong>稳定可靠</strong>：减少配置冲突的可能性</li>
<li><strong>易于调试</strong>：问题定位更直接</li>
</ol>
<p>TF_REPEATED_DATA错误的核心是避免多个发布者控制相同的关节，选择合适的控制架构是关键。</p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="http://wiki.ros.org/ros_control">ROS Control Documentation</a></li>
<li><a href="http://gazebosim.org/tutorials?tut=ros_control">Gazebo ROS Control Tutorial</a></li>
<li><a href="http://wiki.ros.org/tf/Debugging%20tools">TF Troubleshooting Guide</a></li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>TF</tag>
        <tag>Gazebo</tag>
        <tag>仿真</tag>
        <tag>故障排除</tag>
      </tags>
  </entry>
  <entry>
    <title>【MSFL】2：LIO-SAM：从安装到测试</title>
    <url>/2024/12/26/%E3%80%90MSFL%E3%80%912%EF%BC%9ALIO-SAM%EF%BC%9A%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="1、标定IMU-LiDAR"><a href="#1、标定IMU-LiDAR" class="headerlink" title="1、标定IMU+LiDAR"></a>1、标定IMU+LiDAR</h1><h2 id="1、录制ROS包"><a href="#1、录制ROS包" class="headerlink" title="1、录制ROS包"></a>1、录制ROS包</h2><ul>
<li>录制rosbag，仅需包含imu和lidar数据，具体&#x2F;topic需要自行修改：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rosbag record /imu /velodyne_points -O data/ROSBAG/lidar_imu.bag</span><br></pre></td></tr></table></figure>

<ul>
<li>保存的效果如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhao@zhao:~/WS/msfl_ws$ rosbag info data/ROSBAG/lidar_imu.bag </span><br><span class="line">path:        data/ROSBAG/lidar_imu.bag</span><br><span class="line">version:     2.0</span><br><span class="line">duration:    3:17s (197s)</span><br><span class="line">start:       Jan 01 1970 08:00:03.46 (3.46)</span><br><span class="line">end:         Jan 01 1970 08:03:20.57 (200.57)</span><br><span class="line">size:        384.0 MB</span><br><span class="line">messages:    21684</span><br><span class="line">compression: none [475/475 chunks]</span><br><span class="line">types:       sensor_msgs/Imu         [6a62c6daae103f4ff57a132d6f95cec2]</span><br><span class="line">             sensor_msgs/PointCloud2 [1158d486dd51d683ce2f1be655c3c181]</span><br><span class="line">topics:      /imu               19713 msgs    : sensor_msgs/Imu        </span><br><span class="line">             /velodyne_points    1971 msgs    : sensor_msgs/PointCloud2</span><br></pre></td></tr></table></figure>

<h2 id="2、安装依赖项"><a href="#2、安装依赖项" class="headerlink" title="2、安装依赖项"></a>2、安装依赖项</h2><ul>
<li>nlop包安装：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/stevengj/nlopt</span><br><span class="line"><span class="built_in">cd</span> nlopt</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>这里可能会遇到在cmake ..的时候有fail现象，提示一些包未找到，为了保证后续运行顺利，我这边还是安装了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install guile-3.0 <span class="comment">#这里我选择的是3.0版本</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install guile-3.0-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install octave</span><br><span class="line"><span class="built_in">sudo</span> apt-get install liboctave-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install swig</span><br></pre></td></tr></table></figure>

<h2 id="3、修改源码"><a href="#3、修改源码" class="headerlink" title="3、修改源码"></a>3、修改源码</h2><ul>
<li>修改 loader.cpp</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;geometry_msgs/TransformStamped.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rosbag/bag.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rosbag/view.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sensor_msgs/Imu.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lidar_align/loader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lidar_align/transform.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sensor_msgs/Imu.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> lidar_align &#123;</span><br><span class="line"></span><br><span class="line">Loader::<span class="built_in">Loader</span>(<span class="type">const</span> Config&amp; config) : <span class="built_in">config_</span>(config) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Loader::Config <span class="title">Loader::getConfig</span><span class="params">(ros::NodeHandle* nh)</span> </span>&#123;</span><br><span class="line">  Loader::Config config;</span><br><span class="line">  nh-&gt;<span class="built_in">param</span>(<span class="string">&quot;use_n_scans&quot;</span>, config.use_n_scans, config.use_n_scans);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Loader::parsePointcloudMsg</span><span class="params">(<span class="type">const</span> sensor_msgs::PointCloud2 msg,</span></span></span><br><span class="line"><span class="params"><span class="function">                                LoaderPointcloud* pointcloud)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> has_timing = <span class="literal">false</span>;</span><br><span class="line">  <span class="type">bool</span> has_intensity = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> sensor_msgs::PointField&amp; field : msg.fields) &#123;</span><br><span class="line">    <span class="keyword">if</span> (field.name == <span class="string">&quot;time_offset_us&quot;</span>) &#123;</span><br><span class="line">      has_timing = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (field.name == <span class="string">&quot;intensity&quot;</span>) &#123;</span><br><span class="line">      has_intensity = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (has_timing) &#123;</span><br><span class="line">    pcl::<span class="built_in">fromROSMsg</span>(msg, *pointcloud);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (has_intensity) &#123;</span><br><span class="line">    Pointcloud raw_pointcloud;</span><br><span class="line">    pcl::<span class="built_in">fromROSMsg</span>(msg, raw_pointcloud);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> Point&amp; raw_point : raw_pointcloud) &#123;</span><br><span class="line">      PointAllFields point;</span><br><span class="line">      point.x = raw_point.x;</span><br><span class="line">      point.y = raw_point.y;</span><br><span class="line">      point.z = raw_point.z;</span><br><span class="line">      point.intensity = raw_point.intensity;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!std::<span class="built_in">isfinite</span>(point.x) || !std::<span class="built_in">isfinite</span>(point.y) ||</span><br><span class="line">          !std::<span class="built_in">isfinite</span>(point.z) || !std::<span class="built_in">isfinite</span>(point.intensity)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pointcloud-&gt;<span class="built_in">push_back</span>(point);</span><br><span class="line">    &#125;</span><br><span class="line">    pointcloud-&gt;header = raw_pointcloud.header;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt; raw_pointcloud;</span><br><span class="line">    pcl::<span class="built_in">fromROSMsg</span>(msg, raw_pointcloud);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> pcl::PointXYZ&amp; raw_point : raw_pointcloud) &#123;</span><br><span class="line">      PointAllFields point;</span><br><span class="line">      point.x = raw_point.x;</span><br><span class="line">      point.y = raw_point.y;</span><br><span class="line">      point.z = raw_point.z;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!std::<span class="built_in">isfinite</span>(point.x) || !std::<span class="built_in">isfinite</span>(point.y) ||</span><br><span class="line">          !std::<span class="built_in">isfinite</span>(point.z)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pointcloud-&gt;<span class="built_in">push_back</span>(point);</span><br><span class="line">    &#125;</span><br><span class="line">    pointcloud-&gt;header = raw_pointcloud.header;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Loader::loadPointcloudFromROSBag</span><span class="params">(<span class="type">const</span> std::string&amp; bag_path,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="type">const</span> Scan::Config&amp; scan_config,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      Lidar* lidar)</span> </span>&#123;</span><br><span class="line">  rosbag::Bag bag;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    bag.<span class="built_in">open</span>(bag_path, rosbag::bagmode::Read);</span><br><span class="line">  &#125; <span class="built_in">catch</span> (rosbag::BagException e) &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR_STREAM</span>(<span class="string">&quot;LOADING BAG FAILED: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::vector&lt;std::string&gt; types;</span><br><span class="line">  types.<span class="built_in">push_back</span>(std::<span class="built_in">string</span>(<span class="string">&quot;sensor_msgs/PointCloud2&quot;</span>));</span><br><span class="line">  <span class="function">rosbag::View <span class="title">view</span><span class="params">(bag, rosbag::TypeQuery(types))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> scan_num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> rosbag::MessageInstance&amp; m : view) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot; Loading scan: \e[1m&quot;</span> &lt;&lt; scan_num++ &lt;&lt; <span class="string">&quot;\e[0m from ros bag&quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&#x27;\r&#x27;</span> &lt;&lt; std::flush;</span><br><span class="line"></span><br><span class="line">    LoaderPointcloud pointcloud;</span><br><span class="line">    <span class="built_in">parsePointcloudMsg</span>(*(m.<span class="built_in">instantiate</span>&lt;sensor_msgs::PointCloud2&gt;()),</span><br><span class="line">                       &amp;pointcloud);</span><br><span class="line"></span><br><span class="line">    lidar-&gt;<span class="built_in">addPointcloud</span>(pointcloud, scan_config);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lidar-&gt;<span class="built_in">getNumberOfScans</span>() &gt;= config_.use_n_scans) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (lidar-&gt;<span class="built_in">getTotalPoints</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR_STREAM</span>(</span><br><span class="line">        <span class="string">&quot;No points were loaded, verify that the bag contains populated &quot;</span></span><br><span class="line">        <span class="string">&quot;messages of type sensor_msgs/PointCloud2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Loader::loadTformFromROSBag</span><span class="params">(<span class="type">const</span> std::string&amp; bag_path, Odom* odom)</span> </span>&#123;</span><br><span class="line">  rosbag::Bag bag;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    bag.<span class="built_in">open</span>(bag_path, rosbag::bagmode::Read);</span><br><span class="line">  &#125; <span class="built_in">catch</span> (rosbag::BagException e) &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR_STREAM</span>(<span class="string">&quot;LOADING BAG FAILED: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::vector&lt;std::string&gt; types;</span><br><span class="line">  types.<span class="built_in">push_back</span>(std::<span class="built_in">string</span>(<span class="string">&quot;sensor_msgs/Imu&quot;</span>));</span><br><span class="line">  <span class="function">rosbag::View <span class="title">view</span><span class="params">(bag, rosbag::TypeQuery(types))</span></span>;</span><br><span class="line">  <span class="type">size_t</span> imu_num = <span class="number">0</span>;</span><br><span class="line">  <span class="type">double</span> shiftX=<span class="number">0</span>,shiftY=<span class="number">0</span>,shiftZ=<span class="number">0</span>,velX=<span class="number">0</span>,velY=<span class="number">0</span>,velZ=<span class="number">0</span>;</span><br><span class="line">  ros::Time time;</span><br><span class="line">  <span class="type">double</span> timeDiff,lastShiftX,lastShiftY,lastShiftZ;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> rosbag::MessageInstance&amp; m : view)&#123;</span><br><span class="line">    std::cout &lt;&lt;<span class="string">&quot;Loading imu: \e[1m&quot;</span>&lt;&lt; imu_num++&lt;&lt;<span class="string">&quot;\e[0m from ros bag&quot;</span>&lt;&lt;<span class="string">&#x27;\r&#x27;</span>&lt;&lt; std::flush;</span><br><span class="line"></span><br><span class="line">    sensor_msgs::Imu imu=*(m.<span class="built_in">instantiate</span>&lt;sensor_msgs::Imu&gt;());</span><br><span class="line"></span><br><span class="line">    Timestamp stamp = imu.header.stamp.sec * <span class="number">1000000ll</span> +imu.header.stamp.nsec / <span class="number">1000ll</span>;</span><br><span class="line">    <span class="keyword">if</span>(imu_num==<span class="number">1</span>)&#123;</span><br><span class="line">        time=imu.header.stamp;</span><br><span class="line">            <span class="function">Transform <span class="title">T</span><span class="params">(Transform::Translation(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),Transform::Rotation(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span></span>;</span><br><span class="line">        odom-&gt;<span class="built_in">addTransformData</span>(stamp, T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        timeDiff=(imu.header.stamp-time).<span class="built_in">toSec</span>();</span><br><span class="line">        time=imu.header.stamp;</span><br><span class="line">        velX=velX+imu.linear_acceleration.x*timeDiff;</span><br><span class="line">        velY=velX+imu.linear_acceleration.y*timeDiff;</span><br><span class="line">        velZ=velZ+(imu.linear_acceleration.z<span class="number">-9.801</span>)*timeDiff;</span><br><span class="line">        </span><br><span class="line">        lastShiftX=shiftX;</span><br><span class="line">        lastShiftY=shiftY;</span><br><span class="line">        lastShiftZ=shiftZ;</span><br><span class="line">        shiftX=lastShiftX+velX*timeDiff+imu.linear_acceleration.x*timeDiff*timeDiff/<span class="number">2</span>;</span><br><span class="line">        shiftY=lastShiftY+velY*timeDiff+imu.linear_acceleration.y*timeDiff*timeDiff/<span class="number">2</span>;</span><br><span class="line">        shiftZ=lastShiftZ+velZ*timeDiff+(imu.linear_acceleration.z<span class="number">-9.801</span>)*timeDiff*timeDiff/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Transform <span class="title">T</span><span class="params">(Transform::Translation(shiftX,shiftY,shiftZ),</span></span></span><br><span class="line"><span class="params"><span class="function">               Transform::Rotation(imu.orientation.w,</span></span></span><br><span class="line"><span class="params"><span class="function">                        imu.orientation.x,</span></span></span><br><span class="line"><span class="params"><span class="function">                        imu.orientation.y,</span></span></span><br><span class="line"><span class="params"><span class="function">                        imu.orientation.z))</span></span>;</span><br><span class="line">        odom-&gt;<span class="built_in">addTransformData</span>(stamp, T);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// std::vector&lt;std::string&gt; types;</span></span><br><span class="line">  <span class="comment">// types.push_back(std::string(&quot;geometry_msgs/TransformStamped&quot;));</span></span><br><span class="line">  <span class="comment">// rosbag::View view(bag, rosbag::TypeQuery(types));</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// size_t tform_num = 0;</span></span><br><span class="line">  <span class="comment">// for (const rosbag::MessageInstance&amp; m : view) &#123;</span></span><br><span class="line">  <span class="comment">//   std::cout &lt;&lt; &quot; Loading transform: \e[1m&quot; &lt;&lt; tform_num++</span></span><br><span class="line">  <span class="comment">//             &lt;&lt; &quot;\e[0m from ros bag&quot; &lt;&lt; &#x27;\r&#x27; &lt;&lt; std::flush;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   geometry_msgs::TransformStamped transform_msg =</span></span><br><span class="line">  <span class="comment">//       *(m.instantiate&lt;geometry_msgs::TransformStamped&gt;());</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   Timestamp stamp = transform_msg.header.stamp.sec * 1000000ll +</span></span><br><span class="line">  <span class="comment">//                     transform_msg.header.stamp.nsec / 1000ll;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   Transform T(Transform::Translation(transform_msg.transform.translation.x,</span></span><br><span class="line">  <span class="comment">//                                      transform_msg.transform.translation.y,</span></span><br><span class="line">  <span class="comment">//                                      transform_msg.transform.translation.z),</span></span><br><span class="line">  <span class="comment">//               Transform::Rotation(transform_msg.transform.rotation.w,</span></span><br><span class="line">  <span class="comment">//                                   transform_msg.transform.rotation.x,</span></span><br><span class="line">  <span class="comment">//                                   transform_msg.transform.rotation.y,</span></span><br><span class="line">  <span class="comment">//                                   transform_msg.transform.rotation.z));</span></span><br><span class="line">  <span class="comment">//   odom-&gt;addTransformData(stamp, T);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (odom-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR_STREAM</span>(<span class="string">&quot;No odom messages found!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Loader::loadTformFromMaplabCSV</span><span class="params">(<span class="type">const</span> std::string&amp; csv_path, Odom* odom)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::ifstream <span class="title">file</span><span class="params">(csv_path, std::ifstream::in)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> tform_num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (file.<span class="built_in">peek</span>() != EOF) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot; Loading transform: \e[1m&quot;</span> &lt;&lt; tform_num++</span><br><span class="line">              &lt;&lt; <span class="string">&quot;\e[0m from csv file&quot;</span> &lt;&lt; <span class="string">&#x27;\r&#x27;</span> &lt;&lt; std::flush;</span><br><span class="line"></span><br><span class="line">    Timestamp stamp;</span><br><span class="line">    Transform T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getNextCSVTransform</span>(file, &amp;stamp, &amp;T)) &#123;</span><br><span class="line">      odom-&gt;<span class="built_in">addTransformData</span>(stamp, T);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lots of potential failure cases not checked</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Loader::getNextCSVTransform</span><span class="params">(std::istream&amp; str, Timestamp* stamp,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 Transform* T)</span> </span>&#123;</span><br><span class="line">  std::string line;</span><br><span class="line">  std::<span class="built_in">getline</span>(str, line);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ignore comment lines</span></span><br><span class="line">  <span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::stringstream <span class="title">line_stream</span><span class="params">(line)</span></span>;</span><br><span class="line">  std::string cell;</span><br><span class="line"></span><br><span class="line">  std::vector&lt;std::string&gt; data;</span><br><span class="line">  <span class="keyword">while</span> (std::<span class="built_in">getline</span>(line_stream, cell, <span class="string">&#x27;,&#x27;</span>)) &#123;</span><br><span class="line">    data.<span class="built_in">push_back</span>(cell);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (data.<span class="built_in">size</span>() &lt; <span class="number">9</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> TIME = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> X = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> Y = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> Z = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> RW = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> RX = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> RY = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> RZ = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">  *stamp = std::<span class="built_in">stoll</span>(data[TIME]) / <span class="number">1000ll</span>;</span><br><span class="line">  *T = <span class="built_in">Transform</span>(Transform::<span class="built_in">Translation</span>(std::<span class="built_in">stod</span>(data[X]), std::<span class="built_in">stod</span>(data[Y]),</span><br><span class="line">                                        std::<span class="built_in">stod</span>(data[Z])),</span><br><span class="line">                 Transform::<span class="built_in">Rotation</span>(std::<span class="built_in">stod</span>(data[RW]), std::<span class="built_in">stod</span>(data[RX]),</span><br><span class="line">                                     std::<span class="built_in">stod</span>(data[RY]), std::<span class="built_in">stod</span>(data[RZ])));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace lidar_align</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改NLOPTConfig.cmake文件位置</p>
<p>将 lidar_align 源码包里的 NLOPTConfig.cmake 复制到 ROS工作空间<strong>msfl_ws&#x2F;src</strong> 路径下面</p>
</li>
<li><p>修改源码CMakeLists.txt文件，添加以下代码：</p>
</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">set (CMAKE_PREFIX_PATH <span class="string">&quot;/usr/local/lib/cmake/nlopt&quot;</span>)</span><br><span class="line">set(CMAKE_CXX_STANDARD 14)</span><br></pre></td></tr></table></figure>

<ul>
<li>修改launch文件中的包路径</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;arg</span> <span class="string">name=&quot;bag_file&quot;</span> <span class="string">default=&quot;/home/zhao/WS/msfl_ws/data/ROSBAG/lidar_imu.bag&quot;/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、运行代码"><a href="#4、运行代码" class="headerlink" title="4、运行代码"></a>4、运行代码</h2><p>启动代码进行标定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catkin_make <span class="comment">#此处建议先删除之前的build/ devel/</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">roslaunch lidar_align lidar_align.launch</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhao@zhao:~/WS/msfl_ws$ roslaunch lidar_align lidar_align.launch </span><br><span class="line">... logging to /home/zhao/.ros/log/24f28d9c-c332-11ef-a81b-25d9e051409d/roslaunch-zhao-83450.<span class="built_in">log</span></span><br><span class="line">Checking <span class="built_in">log</span> directory <span class="keyword">for</span> disk usage. This may take a <span class="keyword">while</span>.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking <span class="built_in">log</span> file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://zhao:41241/</span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /lidar_align/input_bag_path: /home/zhao/WS/msf...</span><br><span class="line"> * /lidar_align/input_csv_path: PATH/TO/YOUR.csv</span><br><span class="line"> * /lidar_align/output_calibration_path: /home/zhao/WS/msf...</span><br><span class="line"> * /lidar_align/output_pointcloud_path: /home/zhao/WS/msf...</span><br><span class="line"> * /lidar_align/transforms_from_csv: False</span><br><span class="line"> * /rosdistro: noetic</span><br><span class="line"> * /rosversion: 1.17.0</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line">  /</span><br><span class="line">    lidar_align (lidar_align/lidar_align_node)</span><br><span class="line"></span><br><span class="line">ROS_MASTER_URI=http://localhost:11311</span><br><span class="line"></span><br><span class="line">process[lidar_align-1]: started with pid [83464]</span><br><span class="line">[ INFO] [1735198105.395046732]: Loading Pointcloud Data...</span><br><span class="line">[ INFO] [1735198107.504482765]: Loading Transformation Data...                                </span><br><span class="line">[ INFO] [1735198107.640942368]: Interpolating Transformation Data...                          </span><br><span class="line">[ INFO] [1735198109.247437244]: Performing Global Optimization...                             </span><br><span class="line">[ INFO] [1735198300.233199926]: Performing Local Optimization...                                </span><br><span class="line">[ INFO] [1735198309.992561542]: Saving Aligned Pointcloud...                                     eration: 204</span><br><span class="line">[ INFO] [1735198310.543539562]: Saving Calibration File...                                </span><br><span class="line">[ INFO] [1735198310.543604514]: Final Calibration:                                </span><br><span class="line">Active Transformation Vector (x,y,z,rx,ry,rz) from the Pose Sensor Frame to  the Lidar Frame:</span><br><span class="line">[0, 0, 0, -1.39626, 0.465421, 0]</span><br><span class="line"></span><br><span class="line">Active Transformation Matrix from the Pose Sensor Frame to  the Lidar Frame:</span><br><span class="line"> 0.909884 -0.270347  0.314679         0</span><br><span class="line">-0.270347  0.188959  0.944038         0</span><br><span class="line">-0.314679 -0.944038 0.0988438         0</span><br><span class="line">        0         0         0         1</span><br><span class="line"></span><br><span class="line">Active Translation Vector (x,y,z) from the Pose Sensor Frame to  the Lidar Frame:</span><br><span class="line">[0, 0, 0]</span><br><span class="line"></span><br><span class="line">Active Hamiltonen Quaternion (w,x,y,z) the Pose Sensor Frame to  the Lidar Frame:</span><br><span class="line">[0.74123, -0.636805, 0.212268, 0]</span><br><span class="line"></span><br><span class="line">Time offset that must be added to lidar timestamps <span class="keyword">in</span> seconds:</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">ROS Static TF Publisher: &lt;node pkg=<span class="string">&quot;tf&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> name=<span class="string">&quot;pose_lidar_broadcaster&quot;</span> args=<span class="string">&quot;0 0 0 -0.636805 0.212268 0 0.74123 POSE_FRAME LIDAR_FRAME 100&quot;</span> /&gt;</span><br><span class="line">[lidar_align-1] process has finished cleanly</span><br><span class="line"><span class="built_in">log</span> file: /home/zhao/.ros/log/24f28d9c-c332-11ef-a81b-25d9e051409d/lidar_align-1*.<span class="built_in">log</span></span><br><span class="line">all processes on machine have died, roslaunch will <span class="built_in">exit</span></span><br><span class="line">shutting down processing monitor...</span><br><span class="line">... shutting down processing monitor complete</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="2、对比调试数据发布信息"><a href="#2、对比调试数据发布信息" class="headerlink" title="2、对比调试数据发布信息"></a>2、对比调试数据发布信息</h1><h2 id="1、检查rosbag中的topic"><a href="#1、检查rosbag中的topic" class="headerlink" title="1、检查rosbag中的topic"></a>1、检查<code>rosbag</code>中的<code>topic</code></h2><p>检查LIO-SAM开源数据包与个人实际录制数据包中的<code>topic</code>信息，发现<code>imu</code>这一消息类型中，个人录制数据包中四元数错误</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241226222051020.png" alt="image-20241226222051020" style="zoom:67%;" />

<p>此图为<code>walking_dataset.bag</code>中<code>/imu_raw</code>话题的输出结果，可以看到<code>orientation</code>这一个四元数是正确的</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241226222319709.png" alt="image-20241226222319709" style="zoom:67%;" />

<p>此图为<code>msfl.bag</code>中的<code>/imu</code>话题的输出结果，可以看到<code>orientation</code>这个四元数是错误的</p>
<h2 id="2、中继发布-imu数据"><a href="#2、中继发布-imu数据" class="headerlink" title="2、中继发布/imu数据"></a>2、中继发布<code>/imu</code>数据</h2><h2 id="3、注意到IMU的内参也要标定"><a href="#3、注意到IMU的内参也要标定" class="headerlink" title="3、注意到IMU的内参也要标定"></a>3、注意到IMU的内参也要标定</h2><ul>
<li>参考链接：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/qq_43112859/article/details/132879387</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>MSFL</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>MSFL</tag>
        <tag>LIO-SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】ROS rqt_graph保存.dot文件TypeError错误解决方案</title>
    <url>/2025/07/04/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91ROS%20rqt_graph%E4%BF%9D%E5%AD%98.dot%E6%96%87%E4%BB%B6TypeError%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在ROS Noetic中使用rqt_graph保存.dot类型的话题链接情况文件时，出现以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhao@zhao:~/WS/Now/demo_ws$ rosrun rqt_graph rqt_graph </span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/opt/ros/noetic/lib/python3/dist-packages/rqt_graph/ros_graph.py&quot;</span>, line 414, <span class="keyword">in</span> save_dot</span><br><span class="line">    handle.write(self._current_dotcode)</span><br><span class="line">TypeError: write(self, Union[QByteArray, bytes, bytearray]): argument 1 has unexpected <span class="built_in">type</span> <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>问题特征</strong>：</p>
<ul>
<li>保存默认名称<code>frames.dot</code>可以正常工作</li>
<li>保存自定义名称<code>LIO-SAM-Debug-Active.dot</code>时出现错误</li>
<li>保存的文件无法正确打开</li>
</ul>
<h2 id="问题根本原因"><a href="#问题根本原因" class="headerlink" title="问题根本原因"></a>问题根本原因</h2><h3 id="1-编码类型不匹配"><a href="#1-编码类型不匹配" class="headerlink" title="1. 编码类型不匹配"></a>1. 编码类型不匹配</h3><p>在ROS Noetic（Python 3）中，<code>write()</code>方法期望接收字节类型数据（<code>bytes</code>、<code>bytearray</code>或<code>QByteArray</code>），但实际接收到的是字符串类型（<code>str</code>）。</p>
<p><strong>根本原因</strong>：</p>
<ul>
<li>Python 3对字符串和字节的处理更加严格</li>
<li><code>self._current_dotcode</code>是字符串类型</li>
<li>文件句柄的<code>write()</code>方法期望字节类型数据</li>
</ul>
<h3 id="2-文件名特殊字符影响"><a href="#2-文件名特殊字符影响" class="headerlink" title="2. 文件名特殊字符影响"></a>2. 文件名特殊字符影响</h3><p>初步怀疑是文件名中的连字符（<code>-</code>）导致的问题，但实际上主要是编码转换问题。</p>
<p><strong>验证方法</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试不同文件名</span></span><br><span class="line">frames.dot                    <span class="comment"># ✓ 正常</span></span><br><span class="line">LIO-SAM-Debug-Active.dot     <span class="comment"># ✗ 报错</span></span><br><span class="line">LIO_SAM_Debug_Active.dot     <span class="comment"># ✗ 同样报错（如果未修复编码问题）</span></span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="方案一：源码修改（推荐）"><a href="#方案一：源码修改（推荐）" class="headerlink" title="方案一：源码修改（推荐）"></a>方案一：源码修改（推荐）</h3><p><strong>1. 备份原文件</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> /opt/ros/noetic/lib/python3/dist-packages/rqt_graph/ros_graph.py /opt/ros/noetic/lib/python3/dist-packages/rqt_graph/ros_graph.py.bak</span><br></pre></td></tr></table></figure>

<p><strong>2. 修改源代码</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> nano /opt/ros/noetic/lib/python3/dist-packages/rqt_graph/ros_graph.py</span><br></pre></td></tr></table></figure>

<p><strong>3. 找到第414行，进行修改</strong></p>
<p><strong>原代码：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handle.write(<span class="variable language_">self</span>._current_dotcode)</span><br></pre></td></tr></table></figure>

<p><strong>修改为：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">handle.write(<span class="variable language_">self</span>._current_dotcode.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="方案二：更完整的修改（避免潜在问题）"><a href="#方案二：更完整的修改（避免潜在问题）" class="headerlink" title="方案二：更完整的修改（避免潜在问题）"></a>方案二：更完整的修改（避免潜在问题）</h3><p>如果需要更安全的修改，可以添加类型检查：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(<span class="variable language_">self</span>._current_dotcode, <span class="built_in">str</span>):</span><br><span class="line">    handle.write(<span class="variable language_">self</span>._current_dotcode.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    handle.write(<span class="variable language_">self</span>._current_dotcode)</span><br></pre></td></tr></table></figure>

<p><strong>注意事项</strong>：</p>
<ul>
<li>保持原有的缩进格式，避免TabError</li>
<li>如果文件使用制表符缩进，修改时也要使用制表符</li>
<li>如果文件使用空格缩进，修改时也要使用空格</li>
</ul>
<h2 id="调试过程中的错误"><a href="#调试过程中的错误" class="headerlink" title="调试过程中的错误"></a>调试过程中的错误</h2><h3 id="TabError-inconsistent-use-of-tabs-and-spaces"><a href="#TabError-inconsistent-use-of-tabs-and-spaces" class="headerlink" title="TabError: inconsistent use of tabs and spaces"></a>TabError: inconsistent use of tabs and spaces</h3><p>在修改过程中遇到的缩进错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">TabError: inconsistent use of tabs and spaces <span class="keyword">in</span> indentation</span><br></pre></td></tr></table></figure>

<p><strong>解决方法</strong>：</p>
<ol>
<li>恢复备份文件</li>
<li>使用与原文件相同的缩进方式</li>
<li>检查编辑器设置，确保制表符和空格一致</li>
</ol>
<p><strong>检查缩进方式</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看文件缩进类型</span></span><br><span class="line">sed -n <span class="string">&#x27;410,420p&#x27;</span> /opt/ros/noetic/lib/python3/dist-packages/rqt_graph/ros_graph.py | <span class="built_in">cat</span> -A</span><br></pre></td></tr></table></figure>

<h2 id="验证修复"><a href="#验证修复" class="headerlink" title="验证修复"></a>验证修复</h2><h3 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h3><p><strong>1. 基本功能测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosrun rqt_graph rqt_graph</span><br></pre></td></tr></table></figure>

<p><strong>2. 文件名测试</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 测试各种文件名</span></span><br><span class="line">frames.dot                    <span class="comment"># 默认名称</span></span><br><span class="line">test.dot                      <span class="comment"># 简单名称</span></span><br><span class="line">LIO_SAM_Debug_Active.dot     <span class="comment"># 下划线分隔</span></span><br><span class="line">LIO-SAM-Debug-Active.dot     <span class="comment"># 连字符分隔</span></span><br></pre></td></tr></table></figure>

<p><strong>3. 文件内容验证</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查生成的.dot文件内容</span></span><br><span class="line"><span class="built_in">cat</span> your_file.dot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用graphviz生成图像</span></span><br><span class="line">dot -Tpng your_file.dot -o output.png</span><br></pre></td></tr></table></figure>

<h2 id="文件命名建议"><a href="#文件命名建议" class="headerlink" title="文件命名建议"></a>文件命名建议</h2><p>虽然编码问题已解决，但为了避免潜在的兼容性问题，建议：</p>
<h3 id="推荐的文件命名规范"><a href="#推荐的文件命名规范" class="headerlink" title="推荐的文件命名规范"></a>推荐的文件命名规范</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 推荐使用</span></span><br><span class="line">LIO_SAM_Debug_Active.dot</span><br><span class="line">rqt_graph_output.dot</span><br><span class="line">robot_tf_graph.dot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 避免使用</span></span><br><span class="line">LIO-SAM-Debug-Active.dot  <span class="comment"># 连字符可能在某些系统中引起问题</span></span><br><span class="line">空格 文件名.dot           <span class="comment"># 空格需要转义</span></span><br><span class="line">特殊字符@#$.dot          <span class="comment"># 特殊字符可能引起解析问题</span></span><br></pre></td></tr></table></figure>

<h2 id="替代方案"><a href="#替代方案" class="headerlink" title="替代方案"></a>替代方案</h2><h3 id="使用命令行工具"><a href="#使用命令行工具" class="headerlink" title="使用命令行工具"></a>使用命令行工具</h3><p>如果不想修改源码，可以使用ROS的命令行工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前节点和话题</span></span><br><span class="line">rosnode list</span><br><span class="line">rostopic list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成节点图（需要先安装graphviz）</span></span><br><span class="line">rosrun rqt_graph rqt_graph_cmd --output=/tmp/graph.dot</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动转换为图片</span></span><br><span class="line">dot -Tpng /tmp/graph.dot -o /tmp/graph.png</span><br></pre></td></tr></table></figure>

<h3 id="重新安装"><a href="#重新安装" class="headerlink" title="重新安装"></a>重新安装</h3><p>如果修改出现问题，可以重新安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install --reinstall ros-noetic-rqt-graph</span><br></pre></td></tr></table></figure>

<h2 id="问题分析总结"><a href="#问题分析总结" class="headerlink" title="问题分析总结"></a>问题分析总结</h2><h3 id="技术原因"><a href="#技术原因" class="headerlink" title="技术原因"></a>技术原因</h3><ol>
<li><strong>Python 2 → Python 3 迁移遗留问题</strong>：ROS Noetic使用Python 3，对字符串处理更严格</li>
<li><strong>Qt文件处理接口变化</strong>：Qt的文件写入接口期望字节类型数据</li>
<li><strong>编码转换缺失</strong>：源码中未处理字符串到字节的转换</li>
</ol>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ol>
<li><strong>直接修复</strong>：在写入前进行编码转换</li>
<li><strong>类型检查</strong>：添加类型判断以提高兼容性</li>
<li><strong>频率对齐</strong>：确保文件操作的一致性</li>
</ol>
<h2 id="最佳实践建议"><a href="#最佳实践建议" class="headerlink" title="最佳实践建议"></a>最佳实践建议</h2><h3 id="开发建议"><a href="#开发建议" class="headerlink" title="开发建议"></a>开发建议</h3><ol>
<li><strong>备份重要文件</strong>：修改系统文件前务必备份</li>
<li><strong>渐进测试</strong>：从简单测试开始，逐步验证功能</li>
<li><strong>记录修改</strong>：详细记录修改内容和原因</li>
</ol>
<h3 id="系统维护"><a href="#系统维护" class="headerlink" title="系统维护"></a>系统维护</h3><ol>
<li><strong>定期更新</strong>：关注ROS官方更新，此类问题可能在后续版本中修复</li>
<li><strong>环境一致性</strong>：确保开发环境与部署环境一致</li>
<li><strong>文档记录</strong>：将解决方案记录在项目文档中</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个问题的核心是ROS Noetic中Python 3对字符串和字节类型的严格区分。通过简单的编码转换（<code>encode(&#39;utf-8&#39;)</code>）即可解决。</p>
<p><strong>关键要点</strong>：</p>
<ul>
<li>问题出现在字符串到字节的类型转换上</li>
<li>文件名的特殊字符不是主要原因</li>
<li>修改时要注意保持原有的缩进格式</li>
<li>建议在修改前备份原文件</li>
</ul>
<p><strong>修复后的效果</strong>：</p>
<ul>
<li>可以正常保存各种文件名的.dot文件</li>
<li>生成的文件可以正确打开和处理</li>
<li>不再出现TypeError错误</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="http://wiki.ros.org/rqt_graph">ROS rqt_graph Documentation</a></li>
<li><a href="https://docs.python.org/3/howto/unicode.html">Python 3 String and Bytes</a></li>
<li><a href="https://doc.qt.io/qt-5/qiodevice.html">Qt File I&#x2F;O Documentation</a></li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>rqt_graph</tag>
        <tag>Python3</tag>
        <tag>编码问题</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】ROS TF查询命令</title>
    <url>/2025/06/24/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91ROS%20TF%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="可视化查看TF关系树"><a href="#可视化查看TF关系树" class="headerlink" title="可视化查看TF关系树"></a>可视化查看TF关系树</h3><ul>
<li><p>可视化TF树</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun tf view_frames</span><br></pre></td></tr></table></figure>
</li>
<li><p>在当前路径下生成pdf文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evince frames.pdf</span><br></pre></td></tr></table></figure>
</li>
<li><p>单独查看两个坐标之间的发布状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun tf tf_monitor &lt;source_frame&gt; &lt;target_frame&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看两个坐标系的变换关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosrun tf tf_echo &lt;source_frame&gt; &lt;target_frame&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://blog.csdn.net/m0_56661101/article/details/123644158">07 ROS的TF坐标管理工具</a></li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ROS</tag>
        <tag>TF</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】ROSBag批量录制话题</title>
    <url>/2025/07/04/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91ROSBag%E6%89%B9%E9%87%8F%E5%BD%95%E5%88%B6%E8%AF%9D%E9%A2%98/</url>
    <content><![CDATA[<h2 id="批量录制-ROS-话题到-Bag-文件"><a href="#批量录制-ROS-话题到-Bag-文件" class="headerlink" title="批量录制 ROS 话题到 Bag 文件"></a>批量录制 ROS 话题到 Bag 文件</h2><ul>
<li><p>确保目标目录存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /full/path/to/data</span><br></pre></td></tr></table></figure>
</li>
<li><p>从 <code>TopicsRecord.txt</code> 文件读取话题列表并录制到指定路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosbag record -o /full/path/to/data/my_bag $(<span class="built_in">cat</span> TopicsRecord.txt)</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查录制的 bag 文件内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosbag info /full/path/to/data/my_bag_2025-07-04-16-54-00.bag</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用压缩选项录制以减少文件大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosbag record -j -o /full/path/to/data/my_bag $(<span class="built_in">cat</span> TopicsRecord.txt)</span><br></pre></td></tr></table></figure>
</li>
<li><p>按文件大小分割录制（例如，每 1024 MB 分割）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosbag record --<span class="built_in">split</span> --size=1024 -o /full/path/to/data/my_bag $(<span class="built_in">cat</span> TopicsRecord.txt)</span><br></pre></td></tr></table></figure>
</li>
<li><p>限制录制时长（例如，60 秒）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosbag record --duration=60 -o /full/path/to/data/my_bag $(<span class="built_in">cat</span> TopicsRecord.txt)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="示例-TopicsRecord-txt-文件内容"><a href="#示例-TopicsRecord-txt-文件内容" class="headerlink" title="示例 TopicsRecord.txt 文件内容"></a>示例 <code>TopicsRecord.txt</code> 文件内容</h2>  <figure class="highlight text"><table><tr><td class="code"><pre><span class="line">/clock</span><br><span class="line">/imu</span><br><span class="line">/tf</span><br><span class="line">/tf_static</span><br><span class="line">/scan</span><br><span class="line">/d435_cam/color/camera_info</span><br><span class="line">/d435_cam/depth/camera_info</span><br><span class="line">/rgbd_lidar_node/rgbd_cloud_info</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ROSBag</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】ubuntu20.04与A-LOAM：01-安装ceres-solver</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91ubuntu20.04%E4%B8%8EA-LOAM%EF%BC%9A01-%E5%AE%89%E8%A3%85ceres-solver/</url>
    <content><![CDATA[<h2 id="1、依赖安装"><a href="#1、依赖安装" class="headerlink" title="1、依赖安装"></a>1、依赖安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install  liblapack-dev libsuitesparse-dev libcxsparse3 libgflags-dev libgoogle-glog-dev libgtest-dev</span><br></pre></td></tr></table></figure>

<h2 id="2、包下载与安装"><a href="#2、包下载与安装" class="headerlink" title="2、包下载与安装"></a>2、包下载与安装</h2><ul>
<li>下载安装包：<a href="http://ceres-solver.org/ceres-solver-2.0.0.tar.gz">http://ceres-solver.org/ceres-solver-2.0.0.tar.gz</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1. 下载ceres2.0版本</span><br><span class="line"># 地址为 http://ceres-solver.org/ceres-solver-2.0.0.tar.gz</span><br><span class="line">#2. 解压</span><br><span class="line">#3. 进入目录，然后编译</span><br><span class="line">cd ceres-solver</span><br><span class="line">mkdir build &amp;&amp; cd build </span><br><span class="line">cmake ..</span><br><span class="line">make -j3</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、参考链接"><a href="#3、参考链接" class="headerlink" title="3、参考链接"></a>3、参考链接</h2><p><a href="https://blog.csdn.net/little_white138/article/details/142443296">https://blog.csdn.net/little_white138/article/details/142443296</a></p>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>A-LOAM</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】Ubuntu20.04安装ORB_SLAM2的ROS版</title>
    <url>/2025/02/25/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91Ubuntu20.04%E5%AE%89%E8%A3%85ORB_SLAM2%E7%9A%84ROS%E7%89%88/</url>
    <content><![CDATA[<h2 id="Ubuntu-20-04完整安装ORB-SLAM2及配置对应ROS"><a href="#Ubuntu-20-04完整安装ORB-SLAM2及配置对应ROS" class="headerlink" title="Ubuntu 20.04完整安装ORB_SLAM2及配置对应ROS"></a>Ubuntu 20.04完整安装ORB_SLAM2及配置对应ROS</h2><h3 id="0、创建包路径"><a href="#0、创建包路径" class="headerlink" title="0、创建包路径"></a>0、创建包路径</h3><ul>
<li>强烈建议，先在终端创建路径<code>Packages</code>，然后在这个文件夹下进行后续的1、2、3、这三个包的安装</li>
</ul>
<h3 id="1、安装Opencv4-2-0"><a href="#1、安装Opencv4-2-0" class="headerlink" title="1、安装Opencv4.2.0"></a>1、安装Opencv4.2.0</h3><ul>
<li><p>下载压缩包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/opencv/opencv/archive/4.2.0.zip</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用<code>unzip -x opencv4.2.0.zip </code>解压，进入文件夹后依次运行如下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 依赖库安装</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install build-essential cmake git </span><br><span class="line"><span class="built_in">sudo</span> apt-get install libgtk2.0-dev pkg-config libavcodec-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libavformat-dev libswscale-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install python-dev python-numpy python3-dev python3-numpy</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libtbb2 libtbb-dev libjasper-dev libdc1394-22-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install libjpeg-dev libpng-dev libtiff-dev</span><br><span class="line"><span class="comment"># 正式安装</span></span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build </span><br><span class="line">cmake -D CMAKE_INSTALL_PREFIX=/usr/local/opencv4 -D CMAKE_BUILD_TYPE=<span class="string">&quot;Release&quot;</span> -D OPENCV_GENERATE_PKGCONFIG=ON ..</span><br><span class="line">make -j4</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br><span class="line"><span class="comment"># 检查安装</span></span><br><span class="line"><span class="built_in">sudo</span> gedit /etc/ld.so.conf.d/opencv.conf</span><br><span class="line"><span class="comment"># 进入编辑页面后输入</span></span><br><span class="line">/usr/local/opencv4/lib</span><br><span class="line"><span class="comment"># 然后ctrl+s保存，关闭gedit页面后还在这个终端下运行</span></span><br><span class="line"><span class="built_in">sudo</span> ldconfig</span><br><span class="line"><span class="comment"># 编辑bashrc文件，运行</span></span><br><span class="line"><span class="built_in">sudo</span> gedit ~/.bashrc</span><br><span class="line"><span class="comment"># 在文件最后添加</span></span><br><span class="line"><span class="comment">#opencv-4.2.0</span></span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="variable">$&#123;PKG_CONFIG_PATH&#125;</span>:/usr/local/opencv4/lib/pkgconfig</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>:./usr/local/opencv4/lib</span><br><span class="line"><span class="comment"># 然后ctrl+s保存，关闭gedit页面后还在这个终端下运行</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="comment"># 最终检查，依次运行下列命令</span></span><br><span class="line">pkg-config --modversion opencv4</span><br><span class="line">pkg-config --cflags opencv4</span><br><span class="line">pkg-config --libs   opencv4</span><br><span class="line"><span class="comment"># 均有正常输出即可，其中第一个命令输出为4.2.0</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2、安装依赖Pangolin"><a href="#2、安装依赖Pangolin" class="headerlink" title="2、安装依赖Pangolin"></a>2、安装依赖Pangolin</h3><ul>
<li><p>安装依赖项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libglew-dev libboost-dev libboost-thread-dev libboost-filesystem-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install ffmpeg libavcodec-dev libavutil-dev libavformat-dev libswscale-dev libpng-dev</span><br></pre></td></tr></table></figure>

<p>安装Pangolin 0.6(稳定版)（<a href="https://github.com/stevenlovegrove/Pangolin/archive/refs/tags/v0.6.zip">官网下载地址</a>)，不要下载最新master版，编译的时候可能有错误）</p>
</li>
<li><p>配置并编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Pangolin </span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -DCPP11_NO_BOOST=1 ..</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../examples/HelloPangolin</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">./HelloPangolin</span><br></pre></td></tr></table></figure>

<p>成功后会弹出一个终端，里面是一个立方体有三色，关闭即可。</p>
</li>
</ul>
<h3 id="3、安装依赖Eigen3"><a href="#3、安装依赖Eigen3" class="headerlink" title="3、安装依赖Eigen3"></a>3、安装依赖Eigen3</h3><ul>
<li><p>方案一：直接安装</p>
<p>Eigen3是一个纯头文件的库，这个特点让使用者省去了很多安装和环境配置的麻烦，可以直接安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install libeigen3-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>方案二：源码安装</p>
<p>源码（<a href="https://github.com/eigenteam/eigen-git-mirror">地址</a>）安装，执行以下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> eigen3</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>安装后头文件在：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/include/eigen3/</span><br></pre></td></tr></table></figure>

<p>复制头文件到<code>/usr/local/include</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">cp</span> -r /usr/local/include/eigen3/Eigen /usr/local/include</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4、安装ORB-SLAM2"><a href="#4、安装ORB-SLAM2" class="headerlink" title="4、安装ORB_SLAM2"></a>4、安装ORB_SLAM2</h3><ul>
<li><p>使用鱼香ROS的一键配置命令，配置<code>rosdepc</code>，终端执行下列命令，然后输入密码，选择rosdepc，然后配置好了之后会提示让rosdep init之类的命令，执行命令就好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://fishros.com/install -O fishros &amp;&amp; . fishros</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入到自己的ROS工作空间的<code>src</code>文件夹下，下载并解压<a href="https://github.com/raulmur/ORB_SLAM2">源文件</a>，然后打开，此处我的工作空间地址为：<code>/home/zhao/WS/Now/ant_ws/src/ORB_SLAM2</code></p>
</li>
<li><p>修改各个CMakeLists.txt，将其中关于OpenCV的部分做如下修改：</p>
<p>1、主目录ORB_SLAM2下的CMakeLists.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 注释掉下面这7行，类似的也是把涉及到的部分注释调</span></span><br><span class="line"><span class="comment"># find_package(OpenCV 3.0 QUIET)</span></span><br><span class="line"><span class="comment"># if(NOT OpenCV_FOUND)</span></span><br><span class="line"><span class="comment">#    find_package(OpenCV 2.4.3 QUIET)</span></span><br><span class="line"><span class="comment">#    if(NOT OpenCV_FOUND)</span></span><br><span class="line"><span class="comment">#       message(FATAL_ERROR &quot;OpenCV &gt; 2.4.3 not found.&quot;)</span></span><br><span class="line"><span class="comment">#    endif()</span></span><br><span class="line"><span class="comment"># endif()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后添加这两行</span></span><br><span class="line"><span class="built_in">set</span>(CMAKE_PREFIX_PATH <span class="string">&quot;/usr/local/opencv4&quot;</span>) </span><br><span class="line">find_package(OpenCV 4.0 QUIET)</span><br></pre></td></tr></table></figure>

<p>2、<code>ORB_SLAM2/Thirdparty/DBoW2</code>文件夹下的CMakeLists.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find_package(OpenCV 3.0 QUIET)</span></span><br><span class="line"><span class="comment"># if(NOT OpenCV_FOUND)</span></span><br><span class="line"><span class="comment">#    find_package(OpenCV 2.4.3 QUIET)</span></span><br><span class="line"><span class="comment">#    if(NOT OpenCV_FOUND)</span></span><br><span class="line"><span class="comment">#       message(FATAL_ERROR &quot;OpenCV &gt; 2.4.3 not found.&quot;)</span></span><br><span class="line"><span class="comment">#    endif()</span></span><br><span class="line"><span class="comment"># endif()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_PREFIX_PATH <span class="string">&quot;/usr/local/opencv4&quot;</span>) </span><br><span class="line">find_package(OpenCV 4.0 QUIET)</span><br></pre></td></tr></table></figure>

<p>3、<code>ORB_SLAM2/Examples/ROS/ORB_SLAM2</code>文件夹下的CMakeLists.txt</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># find_package(OpenCV 3.0 QUIET)</span></span><br><span class="line"><span class="comment"># if(NOT OpenCV_FOUND)</span></span><br><span class="line"><span class="comment">#    find_package(OpenCV 2.4.3 QUIET)</span></span><br><span class="line"><span class="comment">#    if(NOT OpenCV_FOUND)</span></span><br><span class="line"><span class="comment">#      message(FATAL_ERROR &quot;OpenCV &gt; 2.4.3 not found.&quot;)</span></span><br><span class="line"><span class="comment">#    endif()</span></span><br><span class="line"><span class="comment"># endif()</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_PREFIX_PATH <span class="string">&quot;/usr/local/opencv4&quot;</span>) </span><br><span class="line">find_package(OpenCV 4.0 QUIET)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改ros示例源文件，为<code>Examples/ROS/ORB_SLAM2/src</code>路径下的所有.cc文件添加头文件</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>将<code>ORB_SLAM2/Examples/</code>文件夹下的所有示例源文件中导入图像数据的参数 <code>CV_LOAD_IMAGE_UNCHANGED</code> 修改为下列表述，建议在这个文件夹下使用<code>code . </code>命令开启vscode，使用侧边栏的搜索，然后全局替换(应该是6个)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cv::IMREAD_UNCHANGED</span><br></pre></td></tr></table></figure>
</li>
<li><p>把ORB-SLAM2源码目录中<code>include/LoopClosing.h</code>文件中的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> map&lt;KeyFrame*,g2o::Sim3,std::less&lt;KeyFrame*&gt;,</span><br><span class="line">        Eigen::aligned_allocator&lt;std::pair&lt;<span class="type">const</span> KeyFrame*, g2o::Sim3&gt; &gt; &gt; KeyFrameAndPose;</span><br></pre></td></tr></table></figure>

<p>修改成：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> map&lt;KeyFrame*,g2o::Sim3,std::less&lt;KeyFrame*&gt;,</span><br><span class="line">        Eigen::aligned_allocator&lt;std::pair&lt;KeyFrame *<span class="type">const</span>, g2o::Sim3&gt; &gt; &gt; KeyFrameAndPose;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解压<a href="https://github.com/raulmur/ORB_SLAM2">源文件</a>，在该文件夹下打开终端：</p>
<p>这里建议使用记事本打开build.sh，然后逐个命令执行，方便检查错误，且注意！每次运行到最后的make命令如果失败了，在修复了之后需要依次删除对应的build文件夹，重新创建并编译！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ORB_SLAM2</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure>

<p>如果在运行时出现问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: ’usleep’ was not declared <span class="keyword">in</span> this scope</span><br></pre></td></tr></table></figure>

<p>那么找到对应的<code>.cc</code>文件，在其开头的<code>#include</code>部分添加内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，需要对照着<code>build.sh</code>中的内容，将涉及到的所有<code>build</code>文件夹全部删除并重新开始！</p>
</li>
<li><p>在终端添加ROS路径，执行以下两行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export ROS_PACKAGE_PATH=$&#123;ROS_PACKAGE_PATH&#125;:&#x27;</span><span class="string">&quot;`pwd`/Examples/ROS&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译ros节点，此时便不再会出现问题了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5、Reference"><a href="#5、Reference" class="headerlink" title="5、Reference"></a>5、Reference</h3><ul>
<li><p><a href="https://blog.csdn.net/zardforever123/article/details/125044004/">https://blog.csdn.net/zardforever123/article/details/125044004/</a></p>
<ul>
<li>这个超级全面，而且包含了测试部分的<code>rosbag</code>内容，就是有点混乱，如果你的初衷就是在ROS中实现运行，建议按照我的流程走，然后有问题再参考这个链接的内容！在此感谢此大佬，解救我于水火中！</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/qq_49164258/article/details/129375322">https://blog.csdn.net/qq_49164258/article/details/129375322</a></p>
<ul>
<li>这个里面也包含了<code>rosbag</code>数据集，在验证数据集部分比较详细</li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/weixin_43693946/article/details/127538660">https://blog.csdn.net/weixin_43693946/article/details/127538660</a></p>
<ul>
<li><p>此中提到一个python默认是2的问题，应修改为默认的<code>python 3.8.10</code>，可以参照评论区的建议，执行命令后，重新运行<code>./build_ros.sh</code>即可，注意重新运行时建议先阅读此<code>sh</code>脚本内容，将对应的<code>build</code>文件夹先删除再运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install python-is-python3</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><a href="https://blog.csdn.net/Robot_Starscream/article/details/89435642">https://blog.csdn.net/Robot_Starscream/article/details/89435642</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>ORB_SLAM2</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】ubuntu环境配置AMD显卡驱动</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91ubuntu%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEAMD%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="ubuntu环境配置AMD显卡驱动"><a href="#ubuntu环境配置AMD显卡驱动" class="headerlink" title="ubuntu环境配置AMD显卡驱动"></a>ubuntu环境配置AMD显卡驱动</h1><p>本人买的AMD显卡，最近要在ubuntu环境做python深度学习，所以必须折腾一番，结果发现还不复杂。本人的系统是Ubuntu 20.04.6，显卡是RX6600，亲测有效。</p>
<ul>
<li><p>针对GEM12 MAX 板载的显卡680M，应当选择6.1版本的.deb文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://repo.radeon.com/amdgpu-install/6.1/ubuntu/focal/</span><br></pre></td></tr></table></figure>
</li>
<li><p>对应的pytorch安装命令，应当修改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/rocm6.1</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="0-如果已经配置了显卡驱动但是没有成功，或配置成功想更换版本，则先卸载原有的驱动，重新开始："><a href="#0-如果已经配置了显卡驱动但是没有成功，或配置成功想更换版本，则先卸载原有的驱动，重新开始：" class="headerlink" title="(0) 如果已经配置了显卡驱动但是没有成功，或配置成功想更换版本，则先卸载原有的驱动，重新开始："></a>(0) 如果已经配置了显卡驱动但是没有成功，或配置成功想更换版本，则先卸载原有的驱动，重新开始：</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">~$ sudo amdgpu-install <span class="comment">--uninstall</span></span><br></pre></td></tr></table></figure>

<h4 id="1-在AMD官网下载需要的驱动包："><a href="#1-在AMD官网下载需要的驱动包：" class="headerlink" title="(1) 在AMD官网下载需要的驱动包："></a>(1) 在AMD官网下载需要的驱动包：</h4><p><a href="https://link.csdn.net/?target=https://www.amd.com/en/support/kb/release-notes/rn-amdgpu-unified-linux-22-20?login=from_csdn">驱动包链接</a><br>得到amdgpu-install_xxx_all.deb（xxx是版本号）</p>
<h4 id="2-cd到驱动包路径下，安装驱动包："><a href="#2-cd到驱动包路径下，安装驱动包：" class="headerlink" title="(2) cd到驱动包路径下，安装驱动包："></a>(2) cd到驱动包路径下，安装驱动包：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install ./amdgpu-install_xxx_all.deb</span></span><br></pre></td></tr></table></figure>

<h4 id="3-更新软件："><a href="#3-更新软件：" class="headerlink" title="(3) 更新软件："></a>(3) 更新软件：</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">~<span class="variable">$ </span>sudo apt update</span><br><span class="line">~<span class="variable">$ </span>sudo apt upgrade -y</span><br></pre></td></tr></table></figure>

<h4 id="4-安装驱动："><a href="#4-安装驱动：" class="headerlink" title="(4) 安装驱动："></a>(4) 安装驱动：</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">~<span class="variable">$ </span>sudo amdgpu-install --no-dkms</span><br><span class="line">~<span class="variable">$ </span>sudo apt install rocm-dev</span><br><span class="line">~<span class="variable">$ </span>sudo reboot</span><br><span class="line"><span class="comment"># 等待重启</span></span><br></pre></td></tr></table></figure>

<h4 id="5-配置环境："><a href="#5-配置环境：" class="headerlink" title="(5)配置环境："></a>(5)配置环境：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">ls</span> -l /dev/dri/render*</span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">sudo</span> usermod -a -G render <span class="variable">$LOGNAME</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">sudo</span> usermod -a -G video <span class="variable">$LOGNAME</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$LOGNAME</span>不需要修改</span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">sudo</span> reboot</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待重启</span></span><br></pre></td></tr></table></figure>

<h4 id="6-理论上如果一路上没有报错，便配置成功了，可以输入下列命令验证"><a href="#6-理论上如果一路上没有报错，便配置成功了，可以输入下列命令验证" class="headerlink" title="(6) 理论上如果一路上没有报错，便配置成功了，可以输入下列命令验证"></a>(6) 理论上如果一路上没有报错，便配置成功了，可以输入下列命令验证</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">~<span class="variable">$ </span>rocm-smi</span><br><span class="line"><span class="comment"># 监控GPU性能</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">~$ <span class="regexp">/opt/</span>rocm<span class="regexp">/bin/</span>rocminfo</span><br><span class="line"><span class="comment"># 可以查询到CPU、GPU信息</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">~$ <span class="regexp">/opt/</span>rocm<span class="regexp">/opencl/</span>bin/clinfo</span><br><span class="line"><span class="comment"># 可以查询到GPU信息</span></span><br></pre></td></tr></table></figure>

<p>若以上三条命令都有正常输出，便是配置成功了</p>
<h4 id="（7）接下来，如果有利用GPU进行pytorch深度学习的需求，可以进行python程序验证，简单的指令例如："><a href="#（7）接下来，如果有利用GPU进行pytorch深度学习的需求，可以进行python程序验证，简单的指令例如：" class="headerlink" title="（7）接下来，如果有利用GPU进行pytorch深度学习的需求，可以进行python程序验证，简单的指令例如："></a>（7）接下来，如果有利用GPU进行pytorch深度学习的需求，可以进行python程序验证，简单的指令例如：</h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="keyword">import</span> torch</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">torch.cuda.is_available()</span></span><br></pre></td></tr></table></figure>

<p>返回True就说明成功啦</p>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】从KITTI数据集中处理-1</title>
    <url>/2025/04/30/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E4%BB%8EKITTI%E6%95%B0%E6%8D%AE%E9%9B%86%E4%B8%AD%E5%A4%84%E7%90%86-1/</url>
    <content><![CDATA[<h2 id="1、前期准备"><a href="#1、前期准备" class="headerlink" title="1、前期准备"></a>1、前期准备</h2><ul>
<li><p>下载并解压缩KITTI中关于3D物体的数据集</p>
</li>
<li><p><strong>Step 1：</strong> 下载数据集<br><code>wget https://s3.eu-central-1.amazonaws.com/avg-kitti/data_object_velodyne.zip</code><br><code>wget https://s3.eu-central-1.amazonaws.com/avg-kitti/data_object_label_2.zip</code><br><code>wget https://s3.eu-central-1.amazonaws.com/avg-kitti/data_object_calib.zip</code></p>
</li>
<li><p><strong>Step 2：</strong> 解压数据集<br><code>unzip data_object_velodyne.zip -d kitti_dataset</code><br><code>unzip data_object_label_2.zip -d kitti_dataset</code><br><code>unzip data_object_calib.zip -d kitti_dataset</code></p>
</li>
</ul>
<h2 id="2、检查是否已经安装好了训练环境"><a href="#2、检查是否已经安装好了训练环境" class="headerlink" title="2、检查是否已经安装好了训练环境"></a>2、检查是否已经安装好了训练环境</h2><ul>
<li><p><strong>Step 1：</strong>配置对应conda环境，安装依赖</p>
<p>这里我使用的是pointnet++的pytorch版本，参考了下面的仓库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/yanx27/Pointnet_Pointnet2_pytorch.git</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Step 2：</strong>终端打开到虚拟环境，运行命令测试<br><code>import torch</code><br>输出空行<br><code>torch.cuda.is_available()</code><br>输出：True<br><code>torch.cuda.device_count()</code><br>输出：1<br><code>torch.cuda.device(0)</code><br>输出：&lt;torch.cuda.device object at 0x7fd95fd1fa90&gt;<br><code>torch.cuda.get_device_name(0)</code><br>输出：’NVIDIA GeForce RTX 4060 Laptop GPU’</p>
</li>
<li><p><strong>Step3：</strong>未完待续</p>
</li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】安装Cartographer ROS（noetic）</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E5%AE%89%E8%A3%85Cartographer%20ROS%EF%BC%88noetic%EF%BC%89/</url>
    <content><![CDATA[<h1 id="【安装学习】安装Cartographer-ROS（noetic）"><a href="#【安装学习】安装Cartographer-ROS（noetic）" class="headerlink" title="【安装学习】安装Cartographer ROS（noetic）"></a>【安装学习】安装Cartographer ROS（noetic）</h1><p> 参考链接：<a href="https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html">https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html</a></p>
<h2 id="1、创建工作空间"><a href="#1、创建工作空间" class="headerlink" title="1、创建工作空间"></a>1、创建工作空间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_google_ws/src</span><br><span class="line"><span class="built_in">cd</span> catkin_google_ws/src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure>

<h2 id="2、安装工具"><a href="#2、安装工具" class="headerlink" title="2、安装工具"></a>2、安装工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y python3-wstool python3-rosdep ninja-build stow</span><br></pre></td></tr></table></figure>

<h2 id="3、初始化工作空间"><a href="#3、初始化工作空间" class="headerlink" title="3、初始化工作空间"></a>3、初始化工作空间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> catkin_google_ws</span><br><span class="line">wstool init src</span><br><span class="line">wstool merge -t src https://raw.githubusercontent.com/cartographer-project/cartographer_ros/master/cartographer_ros.rosinstall</span><br><span class="line">wstool update -t src</span><br></pre></td></tr></table></figure>

<h2 id="4、安装依赖"><a href="#4、安装依赖" class="headerlink" title="4、安装依赖"></a>4、安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pip install rosdepc</span><br><span class="line"><span class="built_in">sudo</span> rosdepc init</span><br><span class="line">rosdepc update</span><br></pre></td></tr></table></figure>

<h2 id="5、Libabsl-dev处理"><a href="#5、Libabsl-dev处理" class="headerlink" title="5、Libabsl-dev处理"></a>5、Libabsl-dev处理</h2><p>进行XML文件修改，路径为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cartographer_ws/src/cartographer/package.xml</span><br></pre></td></tr></table></figure>

<p>找到第46行<code>&lt;depend&gt;libabsl-dev&lt;/depend&gt;</code>删掉</p>
<h2 id="6、执行rosdep-install命令"><a href="#6、执行rosdep-install命令" class="headerlink" title="6、执行rosdep install命令"></a>6、执行rosdep install命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosdep update</span><br><span class="line">rosdep install --from-paths src --ignore-src --rosdistro=$&#123;ROS_DISTRO&#125; -y</span><br></pre></td></tr></table></figure>

<h2 id="7、安装abseil库"><a href="#7、安装abseil库" class="headerlink" title="7、安装abseil库"></a>7、安装abseil库</h2><ul>
<li><p>先删除本地abseil库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get remove ros-<span class="variable">$&#123;ROS_DISTRO&#125;</span>-abseil-cpp</span><br></pre></td></tr></table></figure>
</li>
<li><p>再运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src/cartographer/scripts/install_abseil.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>这时发现可能会报错，类型如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* existing target is neither a <span class="built_in">link</span> nor a directory: include/absl/base/internal/sysinfo.h</span><br></pre></td></tr></table></figure>
</li>
<li><p>定位到上方.sh脚本运行后下载的文件夹，与src文件夹同级，进行如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/path/to/abseil-cpp</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>确保编译器可以找到安装的 <code>abseil-cpp</code> 库。检查 <code>LD_LIBRARY_PATH</code> 和 <code>CMAKE_PREFIX_PATH</code> 中是否包含 <code>/usr/local/lib</code> 和 <code>/usr/local</code>，以确保 CMake 和 linker 能找到 <code>abseil-cpp</code> 库。请在终端中执行下方命令，以将这些变量永久添加到 <code>~/.bashrc</code> 里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export CMAKE_PREFIX_PATH=/usr/local:$CMAKE_PREFIX_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8、构建"><a href="#8、构建" class="headerlink" title="8、构建"></a>8、构建</h2><p>在 <code>catkin_ws</code> 中清理 <code>build_isolated</code> 和 <code>devel_isolated</code> 文件夹后重新构建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/WS/catkin_ws</span><br><span class="line"><span class="built_in">rm</span> -rf build_isolated devel_isolated install_isolated</span><br><span class="line">catkin_make_isolated --install --use-ninja</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】安装OpenSSH服务</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E5%AE%89%E8%A3%85OpenSSH%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<ul>
<li><p>安装服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install openssh-server </span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否开启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<p>有输出则证明开启，没有的话手动开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service ssh start</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看IP地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ifconfig </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】安装PCL点云处理软件</title>
    <url>/2024/04/29/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E5%AE%89%E8%A3%85PCL%E7%82%B9%E4%BA%91%E5%A4%84%E7%90%86%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="1、安装CloudCompare"><a href="#1、安装CloudCompare" class="headerlink" title="1、安装CloudCompare"></a>1、安装CloudCompare</h2><ul>
<li><p>使用flatpack安装</p>
</li>
<li><p><strong>Step 1：</strong> 添加软件仓库<br><code>sudo apt install flatpak</code><br><code>sudo apt install gnome-software-plugin-flatpak</code><br><code>flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo</code></p>
</li>
<li><p><strong>Step 2：</strong> 安装软件<br><code>flatpak install flathub org.cloudcompare.CloudCompare</code></p>
</li>
<li><p><strong>Step 3：</strong> Configure CMakeLists.txt to use<br><code>set(CMAKE_CXX_FLAGS &quot;-std=c++14&quot;)</code> instead of <code>set(CMAKE_CXX_FLAGS &quot;-std=c++11&quot;)</code></p>
</li>
</ul>
<h2 id="2、安装MeshLab"><a href="#2、安装MeshLab" class="headerlink" title="2、安装MeshLab"></a>2、安装MeshLab</h2><ul>
<li><p><strong>Step 1：</strong>下载flatpack格式的安装包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://flathub.org/apps/details/net.meshlab.MeshLab</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Step 2：</strong>终端打开到安装包下载地址，运行安装命令<br><code>flatpak install net.meshlab.MeshLab.flatpakref</code></p>
</li>
<li><p><strong>Step3：</strong>记得对Ubuntu20.04的sudo apt install安装说一句Fuck!</p>
</li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】安装ROS包LIO-SAM(noetic)</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E5%AE%89%E8%A3%85ROS%E5%8C%85LIO-SAM(noetic)/</url>
    <content><![CDATA[<h2 id="1、参考"><a href="#1、参考" class="headerlink" title="1、参考"></a>1、参考</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/TixiaoShan/LIO-SAM</span><br><span class="line"></span><br><span class="line">https://blog.csdn.net/qq_41690864/article/details/118711743</span><br><span class="line">（标题名：3维SLAM入门 LIO-SAM的安装与运行 ubuntu18.04+ros melodic）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、操作流程"><a href="#2、操作流程" class="headerlink" title="2、操作流程"></a>2、操作流程</h2><ul>
<li><p>安装依赖程序，参考issues#206</p>
</li>
<li><p><strong>Step 1：</strong> Install GTSAM 4.0.3 binary</p>
</li>
<li><p><strong>Step 2：</strong> Configure the utility.h to use<br><code>#include &lt;opencv2/opencv.hpp&gt;</code> instead of <code>#include &lt;opencv/cv.h&gt;</code></p>
</li>
<li><p><strong>Step 3：</strong> Configure CMakeLists.txt to use<br><code>set(CMAKE_CXX_FLAGS &quot;-std=c++14&quot;)</code> instead of <code>set(CMAKE_CXX_FLAGS &quot;-std=c++11&quot;)</code></p>
</li>
<li><p><strong>Step 4：</strong>Move <code>#include &lt;opencv2/opencv.hpp&gt;</code> after the <code>pcl</code> headers</p>
</li>
<li><pre><code># 进行Step1的安装
cd ~/catkin_ws/src
git clone https://github.com/TixiaoShan/LIO-SAM.git
# 进行如上Step2~4的修改
cd ..
catkin_make
echo &quot;source ~/你的工作空间/devel/setup.bash&quot; &gt;&gt; ~/.bashrc
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 3、验证操作</span><br><span class="line"></span><br><span class="line">- **Step 1：**下载数据集rosbag文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
https://drive.google.com/drive/folders/1gJHwfdHCRdjP7vuT556pv8atqrCJPbUq
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **Step 2：**运行roslaunch，另开一个窗口播放rosbag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
roslaunch lio-sam run.launch
rosbag play ~/catkin_ws/src/data/下载的rosbag包.bag
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **Step3：**保存pcd建图结果</span><br><span class="line"></span><br><span class="line">  - 首先，需要修改params.yaml中的参数。params.yaml在~/catkin_ws/src/LIO-SAM/config文件夹下。修改该文件中SavePCD：true 和保存地址。</span><br><span class="line"></span><br><span class="line">  - 然后，为了避免保存还没完成，ros就已经关闭了节点，需要设置_TIMEOUT_SIGINT的值。按如下命令打开文件：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  sudo gedit /opt/ros/melodic/lib/python2.7/dist-packages/roslaunch/nodeprocess.py
</code></pre>
<p>  在文件中找到_TIMEOUT_SIGINT，并设置为100秒。这样，在命令窗口中按下Ctrl+C来结束run.launch的运行时，便会自动将pcd文件保存到指定地址。</p>
</li>
</ul>
<h2 id="4、pointcloud-to-laserscan"><a href="#4、pointcloud-to-laserscan" class="headerlink" title="4、pointcloud_to_laserscan"></a>4、pointcloud_to_laserscan</h2><ul>
<li>注意从github下载的源码要选择luner版本的</li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】安装cmake-3.26</title>
    <url>/2025/04/28/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E5%AE%89%E8%A3%85cmake-3.26/</url>
    <content><![CDATA[<h1 id="CMake-3-26-和-GCC-11-安装总结"><a href="#CMake-3-26-和-GCC-11-安装总结" class="headerlink" title="CMake 3.26 和 GCC 11 安装总结"></a>CMake 3.26 和 GCC 11 安装总结</h1><h2 id="1-手动从源码安装-CMake-3-26-版本"><a href="#1-手动从源码安装-CMake-3-26-版本" class="headerlink" title="1. 手动从源码安装 CMake 3.26 版本"></a>1. 手动从源码安装 CMake 3.26 版本</h2><p>为了安装 CMake 3.26，可以通过以下步骤手动编译安装：</p>
<h3 id="1-1-下载-CMake-源码"><a href="#1-1-下载-CMake-源码" class="headerlink" title="1.1 下载 CMake 源码"></a>1.1 下载 CMake 源码</h3><p>首先，访问 <a href="https://github.com/Kitware/CMake/releases">CMake GitHub releases 页面</a> 或者使用 <code>wget</code> 下载 CMake 3.26 的源码包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/Kitware/CMake/releases/download/v3.26.0/cmake-3.26.0.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="1-2-解压源码包"><a href="#1-2-解压源码包" class="headerlink" title="1.2 解压源码包"></a>1.2 解压源码包</h3><p>下载完成后，解压文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf cmake-3.26.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-3.26.0</span><br></pre></td></tr></table></figure>

<h3 id="1-3-编译并安装"><a href="#1-3-编译并安装" class="headerlink" title="1.3 编译并安装"></a>1.3 编译并安装</h3><p>运行以下命令来编译并安装 CMake：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./bootstrap</span><br><span class="line">make</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这可能需要一些时间来完成编译。</p>
</blockquote>
<h3 id="1-4-验证安装"><a href="#1-4-验证安装" class="headerlink" title="1.4 验证安装"></a>1.4 验证安装</h3><p>安装完成后，使用以下命令验证 CMake 是否已成功安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake --version</span><br></pre></td></tr></table></figure>

<p>你应该看到类似以下的输出，表示已安装 CMake 3.26：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmake version 3.26.x</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="2-升级到-GCC-11"><a href="#2-升级到-GCC-11" class="headerlink" title="2. 升级到 GCC 11"></a>2. 升级到 GCC 11</h2><h3 id="2-1-安装-GCC-11"><a href="#2-1-安装-GCC-11" class="headerlink" title="2.1 安装 GCC 11"></a>2.1 安装 GCC 11</h3><p>为了在 Ubuntu 中安装 GCC 11，你可以通过 APT 包管理器来进行安装。首先更新 APT 包管理器，并安装 GCC 11：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install gcc-11 g++-11</span><br></pre></td></tr></table></figure>

<h3 id="2-2-切换默认-GCC-版本"><a href="#2-2-切换默认-GCC-版本" class="headerlink" title="2.2 切换默认 GCC 版本"></a>2.2 切换默认 GCC 版本</h3><p>安装完成后，你可以使用 <code>update-alternatives</code> 工具来选择使用 GCC 11 作为默认编译器。运行以下命令来配置默认的 GCC 和 G++ 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-alternatives --config gcc</span><br></pre></td></tr></table></figure>

<p>在提示选择时，输入对应的数字（例如选择 <code>gcc-11</code>），然后按回车。</p>
<p>同样，对于 G++，使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-alternatives --config g++</span><br></pre></td></tr></table></figure>

<h3 id="2-3-验证-GCC-版本"><a href="#2-3-验证-GCC-版本" class="headerlink" title="2.3 验证 GCC 版本"></a>2.3 验证 GCC 版本</h3><p>安装并切换完成后，使用以下命令检查当前的 GCC 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc --version</span><br><span class="line">g++ --version</span><br></pre></td></tr></table></figure>

<p>输出应该显示 GCC 和 G++ 版本为 11.x.x。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc (Ubuntu 11.x.x) ...</span><br><span class="line">g++ (Ubuntu 11.x.x) ...</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>通过从源码安装 CMake 3.26 版本，你可以确保获得最新的稳定版本。</li>
<li>GCC 11 的安装和切换是为了确保支持现代 C++ 特性，如 <code>&lt;ranges&gt;</code> 等。</li>
<li>在完成这两个工具的安装和配置后，你的开发环境将能够支持更高级的 CMake 和 GCC 功能。</li>
</ul>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】设置对.mkv视频的播放支持</title>
    <url>/2024/12/24/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E8%AE%BE%E7%BD%AE%E5%AF%B9.mkv%E8%A7%86%E9%A2%91%E7%9A%84%E6%92%AD%E6%94%BE%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[<h2 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h2><p>安装 <code>ubuntu-restricted-extras</code>，<code>ubuntu-restricted-extras</code> 包含常用的多媒体编解码器，包括支持 MKV 格式的解码器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install ubuntu-restricted-extras</span><br></pre></td></tr></table></figure>

<p>注意！Ubuntu终端显示文本让选择确定，OK等等：首先按下”TAB”键,会看到选中文本”确定”,”OK”然后按下回车键,即可!</p>
<h2 id="2、成功"><a href="#2、成功" class="headerlink" title="2、成功"></a>2、成功</h2><h2 id="3、变速保存"><a href="#3、变速保存" class="headerlink" title="3、变速保存"></a>3、变速保存</h2><p>可以使用 ffmpeg 将视频转换为3倍速播放的 mp4 格式。以下是具体操作步骤</p>
<p>在终端中执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 2024-12-24_15-32-53.mkv -filter:v &quot;setpts=PTS/3&quot; -an -c:v libx264 -preset fast -crf 23 2024-12-24_15-32-53_3x.mp4</span><br></pre></td></tr></table></figure>

<p>解释</p>
<ul>
<li><strong><code>-i 2024-12-24_15-32-53.mkv</code></strong>: 指定输入文件。</li>
<li><strong><code>-filter:v &quot;setpts=PTS/3&quot;</code></strong>: 使用 <code>setpts</code> 过滤器将视频播放速度调整为原来的3倍速。<code>PTS/3</code> 表示时间戳变为原来的1&#x2F;3。</li>
<li><strong><code>-an</code></strong>: 删除音频轨道。如果需要加快音频速度，见下方。</li>
<li><strong><code>-c:v libx264</code></strong>: 使用 H.264 编解码器。</li>
<li><strong><code>-preset fast</code></strong>: 选择快速编码预设。</li>
<li><strong><code>-crf 23</code></strong>: 设置视频质量，<code>23</code> 为默认值，数值越小质量越高（如需要更高质量可以调低）。</li>
<li><strong><code>2024-12-24_15-32-53_3x.mp4</code></strong>: 指定输出文件名。</li>
</ul>
<hr>
<p>如果需要保留并加速音频，音频也需要同步加速，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 2024-12-24_15-32-53.mkv -filter_complex &quot;[0:v]setpts=PTS/3[v];[0:a]atempo=3[a]&quot; -map &quot;[v]&quot; -map &quot;[a]&quot; -c:v libx264 -preset fast -crf 23 2024-12-24_15-32-53_3x.mp4</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>[0:v]setpts=PTS/3[v]</code></strong>: 设置视频为3倍速。</li>
<li><strong><code>[0:a]atempo=3[a]</code></strong>: 将音频加速3倍。<code>atempo</code> 最大支持2倍速，可多次链式叠加（例如 6倍速可用 <code>atempo=2,atempo=3</code>）。</li>
</ul>
<hr>
<p>最终文件检查：转码完成后，可以使用以下命令检查输出文件信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 2024-12-24_15-32-53_3x.mp4</span><br></pre></td></tr></table></figure>

<p>这样可以确认视频和音频是否按预期处理。如果还有其他需求，随时告诉我！ 😊</p>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>mkv</tag>
      </tags>
  </entry>
  <entry>
    <title>【思考杂谈】计划三两事</title>
    <url>/2024/12/23/%E3%80%90%E6%80%9D%E8%80%83%E6%9D%82%E8%B0%88%E3%80%91%E8%AE%A1%E5%88%92%E4%B8%89%E4%B8%A4%E4%BA%8B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="a3eb857f7d367ef4a7e7a1f49ca1e15fd175f22a01f05296bef735b3877262e1">10d79030e8222445804370796b90fca106f15dd47c03b7cc3ac7fb0590359f377a859cf950ad987618fadbe93de34133cb960d16b2508ad9eedabc79c913c598a0e237a37185117fdf678a10db4a9c858d34f66cc4a595c4ef0bbb7961414de3b45bc80a160e97c2a513d33c40a28b68127dca6464a61d7dba931dc3c06b156337c3920350fee83237eb96f24332031d1048ec3e044d9c966e7be67b7579a105a6ba2d9066d874d6cc5573d857ee76a1cf4523b5e14d6bf48e10b580c119847df45b65caf33b9758050e99ed9f78471d70d8e53eb7483610b57b613f7321b52590c75e02f0b98e10c2782d8f419af37ae8c20b2dc0a662c4fd7c765d9064709058d48ba1f52d849ef18f0b1e7fd4c691a5551dd82460c75fda8055d731f3d889da76ff08d6463356e865d2a2f7d4a3ff5139065e81658ed23119290f0ed1a57896213caa92bf72a7dbc20022189a6d4b09514f3ca3091095c9f60fb7515534e6fd35bb2dcbf53b5813406f484e65ececdd092e6729a841541d20a16c970e8876a8eccb56fc8a425d42a2110c06cbfd4dbf0cc375e4bc0fbf5db9103b5b03361040c21b8e091753dabe842d13e5d2760eb8d5773e51d09ad5652e67a72ee05d8321c043f5dc473cf751190c2af0f969dcb1fc64547001fb98a8098602e23c0f41a510df57e72d48db71cb4db2709ba84a26bb8d9b93cb1cae55c02f8c11a57627a83cefb81b26d97d84d496ef4e59799f5c113b425ef93894004644849de5c05ae98a962e0588800dde90b61a350db270ec6d4f6355bcc309682b54f038292eed4945d002615dc3d0bb8e2f8876446a726bf051d3310ec5f034d0c991944f14f61b077fe8c3ecd82c3467034782d4c58c8478866292653c8fdc57e66e1df8fd6f500263e54f0003c73f94c830389250c9e32ed88bf2ca86240e9dd6530b8b00ced314023dc59a39ee1256e727dd8a86876f55d0ce3e84813f42b6b850594f0220597e1d76269ee517506a9a4683f2acc2c56ee6cb6cdfa427f877ee0cbe5460ceef354a6ada52f48066d96f4564df549a81c3867e48eaca75e385bb051b95fd6bb637508409b96491afbdd8a6f9b3668a1b77b784c571978b0adf65fd4ba4fd5fb000326223a081e91704ba9684adc0c345a9e11f20e28403f7f78db479f891ea325f11c777b3c6b71a0b4c7be2df5d0bbe77630c6f3ef6bc8d1009d91a2486ba6d06a5894e622d408f897873e4e075adf9a8cf01f7a532d13e159b07475e38c3d82d1b19edfbff8c27524c9102a78921</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>思考杂谈</category>
      </categories>
      <tags>
        <tag>计划</tag>
        <tag>思考</tag>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Blogs上传新文章</title>
    <url>/2024/12/23/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Blogs%E4%B8%8A%E4%BC%A0%E6%96%B0%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="1、Blogs搭建操作"><a href="#1、Blogs搭建操作" class="headerlink" title="1、Blogs搭建操作"></a>1、Blogs搭建操作</h2><h2 id="2、主题替换与设置"><a href="#2、主题替换与设置" class="headerlink" title="2、主题替换与设置"></a>2、主题替换与设置</h2><h2 id="3、分类和标签设置"><a href="#3、分类和标签设置" class="headerlink" title="3、分类和标签设置"></a>3、分类和标签设置</h2><h2 id="4、书写笔记和上传"><a href="#4、书写笔记和上传" class="headerlink" title="4、书写笔记和上传"></a>4、书写笔记和上传</h2><ul>
<li>在路径<code>/source</code>下添加<code>.md</code>新文件，复制抬头中的<code>categories</code>和<code>tags</code>等信息，具体如下：  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: 【技能学习】Blogs上传新文章</span><br><span class="line">title: 【技能学习】Blogs上传新文章</span><br><span class="line">date: 2024-12-23</span><br><span class="line">categories:</span><br><span class="line">  - 技能学习</span><br><span class="line">tags:</span><br><span class="line">  - Blogs</span><br><span class="line">  - 学习</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
<li>终端运行如下指令，进行静态资源生成和上载至Git仓库  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Blogs</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Git中Clone仓库后更新与推送本人仓库</title>
    <url>/2024/12/23/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Git%E4%B8%ADClone%E4%BB%93%E5%BA%93%E5%90%8E%E6%9B%B4%E6%96%B0%E4%B8%8E%E6%8E%A8%E9%80%81%E6%9C%AC%E4%BA%BA%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="1、创建fork分支"><a href="#1、创建fork分支" class="headerlink" title="1、创建fork分支"></a>1、创建fork分支</h2><ul>
<li><p>找到别人的仓库地址，创建fork分支</p>
<p>以<a href="https://github.com/HKUST-Aerial-Robotics/A-LOAM.git%E4%B8%BA%E4%BE%8B%EF%BC%8C%E5%88%9B%E5%BB%BA%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BAfork%EF%BC%9A">https://github.com/HKUST-Aerial-Robotics/A-LOAM.git为例，创建如下图所示fork：</a><br><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223125247243.png" alt="image-20241223125247243"></p>
</li>
<li><p>在个人项目中的src&#x2F;中，下载项目代码并编译（依据个人工作空间环境作出适当修改）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/HKUST-Aerial-Robotics/A-LOAM.git</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、替换子模块的远程地址"><a href="#2、替换子模块的远程地址" class="headerlink" title="2、替换子模块的远程地址"></a>2、替换子模块的远程地址</h2><p>在<code>msfl_ws</code>工作空间中，将<code>A-LOAM-NOTED</code>子模块指向你 Fork 的版本。</p>
<ul>
<li>进入<code>A-LOAM-NOTED</code>子模块目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src/A-LOAM-NOTED</span><br></pre></td></tr></table></figure>

<ul>
<li>修改远程地址</li>
</ul>
<p>​	将子模块的远程地址替换为你的 Fork 仓库地址（以下示例使用你的 GitHub 用户名<code>YourUsername</code>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://github.com/YourUsername/A-LOAM-NOTED.git</span><br></pre></td></tr></table></figure>

<ul>
<li>验证远程地址</li>
</ul>
<p>​	确认远程地址已被修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>​	输出应显示类似以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">origin  https://github.com/YourUsername/A-LOAM-NOTED.git (fetch)</span><br><span class="line">origin  https://github.com/YourUsername/A-LOAM-NOTED.git (push)</span><br></pre></td></tr></table></figure>

<h2 id="3、修改提交到-Fork-仓库"><a href="#3、修改提交到-Fork-仓库" class="headerlink" title="3、修改提交到 Fork 仓库"></a>3、修改提交到 Fork 仓库</h2><ul>
<li><p>在<code>A-LOAM-NOTED</code>目录中，确认当前分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交修改</p>
<p>将本地的修改提交到当前分支，或创建一个新分支来提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b ubuntu20.04-mods</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Adapted A-LOAM-NOTED for Ubuntu 20.04&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>推送到你的 Fork 仓库</p>
<p>将修改个体到 Fork 仓库的分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin ubuntu20.04-mods</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、更新主仓库对子模块的引用"><a href="#4、更新主仓库对子模块的引用" class="headerlink" title="4、更新主仓库对子模块的引用"></a>4、更新主仓库对子模块的引用</h2><p>在主仓库中，更新<code>A-LOAM-NOTED</code>的子引用模块，指向你的 Fork 仓库和分支</p>
<ul>
<li><p>返回主仓库目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新子模块引用</p>
<p>修改子模块配置，导出指向你的Fork仓库和分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -f .gitmodules submodule.src/A-LOAM-NOTED.url https://github.com/YourUsername/A-LOAM-NOTED.git</span><br><span class="line">git config -f .gitmodules submodule.src/A-LOAM-NOTED.branch ubuntu20.04-mods</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步子模块</p>
<p>同步子模块的配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule <span class="built_in">sync</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提交更新</p>
<p>将主仓库对子模块的更新提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .gitmodules src/A-LOAM-NOTED</span><br><span class="line">git commit -m <span class="string">&quot;Updated submodule A-LOAM-NOTED to fork repository&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Tips：一般到这里就完成了"><a href="#Tips：一般到这里就完成了" class="headerlink" title="Tips：一般到这里就完成了"></a>Tips：一般到这里就完成了</h2><h2 id="5、验证-Fork-和更新"><a href="#5、验证-Fork-和更新" class="headerlink" title="5、验证 Fork 和更新"></a>5、验证 Fork 和更新</h2><ul>
<li><p>验证主仓库对子模块的引用</p>
<p>运行以下命令，确认子模块已指向你的Fork仓库和分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule status</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证远程仓库同步</p>
<p>在其他工作空间中克隆主仓库时，确保正确取模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/YourUsername/msfl_ws.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果已存在本地仓库，更新子模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Tips：修改branch及同步"><a href="#Tips：修改branch及同步" class="headerlink" title="Tips：修改branch及同步"></a>Tips：修改branch及同步</h2><ul>
<li><p>远程仓库设置：当<code>fork</code>的分支使用的是<code>master</code>等名称时，需要进入到项目的设置中，选择<code>branch</code>，点击<code>rename</code></p>
</li>
<li><p>本地仓库设置：在本地的子模块中，首先进行分支重命名，执行如下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m master main</span><br></pre></td></tr></table></figure>

<p>运行后执行<code>git branch</code>操作，输出会显示<code>*main</code>表示已经成功重命名本地分支，后续进行<code>push</code>操作即可</p>
</li>
<li><p>注意如果运行<code>git push</code>操作等其他操作时让你重新输出用户名和密码，证明之前检查<code>git remote -v</code>的输出是<code>https</code>链接的，已经被<code>github</code>弃用了，但之前肯定你配置了<code>ssh</code>链接，那就不需要重新配置，只需运行下述指令，重新将本地库链接修改为以<code>git</code>链接的即可，即修改下方的<code>QianYuan1437/LIO-SAM-Modified.git</code>为自己的<code>fork</code>仓库，其余信息与上方操作2提到的一致</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git@github.com:QianYuan1437/LIO-SAM-Modified.git</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】ROS使用Ctrl+C关闭太慢怎么解决</title>
    <url>/2025/01/06/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91ROS%E4%BD%BF%E7%94%A8Ctrl+C%E5%85%B3%E9%97%AD%E5%A4%AA%E6%85%A2%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<ul>
<li><p>红色警告信息：</p>
</li>
<li><p>终端运行如下指令</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/ros/noetic/lib/python3/dist-packages/roslaunch/nodeprocess.py </span><br></pre></td></tr></table></figure>
<p>  将其中的<code>_TIMEOUT_SIGINT</code>后缀的数字15，修改为更短的时间即可</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Ubuntu20.04实现LiDAR+CAMERA标定</title>
    <url>/2025/04/03/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Ubuntu20.04%E5%AE%9E%E7%8E%B0LiDAR+CAMERA%E6%A0%87%E5%AE%9A/</url>
    <content><![CDATA[<h2 id="1、Gitclone对应仓库并编译"><a href="#1、Gitclone对应仓库并编译" class="headerlink" title="1、Gitclone对应仓库并编译"></a>1、Gitclone对应仓库并编译</h2><ul>
<li><p>从下方链接下载：</p>
<p><a href="https://github.com/XidianLemon/calibration_camera_lidar">https://github.com/XidianLemon/calibration_camera_lidar</a></p>
<p>下载后到自己项目的<code>src</code>中，然后正常<code>catkin_make</code>编译：</p>
<p>提示遇到错误，运行命令<code>sudo apt install ros-noetic-jsk-recognition-msgs</code>即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Could not find a package configuration file provided by</span><br><span class="line">  &quot;jsk_recognition_msgs&quot; with any of the following names:</span><br><span class="line"></span><br><span class="line">    jsk_recognition_msgsConfig.cmake</span><br><span class="line">    jsk_recognition_msgs-config.cmake</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、仿真中进行录制"><a href="#2、仿真中进行录制" class="headerlink" title="2、仿真中进行录制"></a>2、仿真中进行录制</h2><ul>
<li><p>参考链接博文，下载场景，并自行导入自己的小车模型，然后开启小车的仿真，录制<code>rosbag</code></p>
<p>模型的下载地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://pan.baidu.com/s/1H314s6Hn-bY1qFphinnNrg?pwd=2022</span><br></pre></td></tr></table></figure>

<p>博客的链接地址：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_43807148/article/details/114241862</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
<h2 id="2、阿里云OSS控制台账号获取"><a href="#2、阿里云OSS控制台账号获取" class="headerlink" title="2、阿里云OSS控制台账号获取"></a>2、阿里云OSS控制台账号获取</h2><ul>
<li><p>参考下方链接操作，获取ID和Key，必须保存一下，仅显示一次！</p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E9%98%BF%E9%87%8C%E4%BA%91oss">https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E9%98%BF%E9%87%8C%E4%BA%91oss</a></p>
<p><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223131442808.png" alt="image-20241223131442808"></p>
</li>
<li><p>参考上方链接，配置接下来的OSS-Bucket等信息：</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223132115503.png" alt="image-20241223132115503" style="zoom: 67%;" />

<p>确认完成后，返回主界面可以测试一下上传是否成功即可。</p>
</li>
</ul>
<h2 id="3、Typora安装与配置"><a href="#3、Typora安装与配置" class="headerlink" title="3、Typora安装与配置"></a>3、Typora安装与配置</h2><ul>
<li><p>安装：最后一版免费Typora，感谢鱼香ROS大佬保存！</p>
<p><a href="https://fishros.org.cn/forum/topic/23/%E5%AE%89%E8%A3%85typora%E6%9C%80%E5%90%8E%E7%9A%84%E5%85%8D%E8%B4%B9%E7%89%88">https://fishros.org.cn/forum/topic/23/%E5%AE%89%E8%A3%85typora%E6%9C%80%E5%90%8E%E7%9A%84%E5%85%8D%E8%B4%B9%E7%89%88</a></p>
</li>
<li><p>打开Typora，点击：文件-偏好设置-图像，如下图所示：</p>
<p><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223132432287.png" alt="image-20241223132432287"></p>
</li>
<li><p>选择配置如上图所示，上传服务选择Core，然后点击下载（需要网络），下载完成后点击“打开配置文件”，复制上方安装的PicGo中的配置信息，完全粘贴到刚刚打开的配置文件中，保存</p>
<p><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223132635641.png" alt="image-20241223132635641"></p>
</li>
<li><p>修改后，点击“验证图片上传选项”，测试成功即可！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>ROS</tag>
        <tag>Calibration</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Ubuntu删除应用</title>
    <url>/2025/01/13/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Ubuntu%E5%88%A0%E9%99%A4%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="从-Ubuntu-系统中卸载-ImageMagick-及相关依赖"><a href="#从-Ubuntu-系统中卸载-ImageMagick-及相关依赖" class="headerlink" title="从 Ubuntu 系统中卸载 ImageMagick 及相关依赖"></a>从 Ubuntu 系统中卸载 <code>ImageMagick</code> 及相关依赖</h1><p>在某些情况下，系统中可能安装了 <code>ImageMagick</code> 和其他 KDE 或图像处理相关的软件包，而这些应用程序可能不再需要或者是未曾手动安装的。本文记录了如何在 Ubuntu 系统中卸载 <code>ImageMagick</code> 及其相关依赖。</p>
<h2 id="步骤-1：查找并列出-ImageMagick-相关包"><a href="#步骤-1：查找并列出-ImageMagick-相关包" class="headerlink" title="步骤 1：查找并列出 ImageMagick 相关包"></a>步骤 1：查找并列出 <code>ImageMagick</code> 相关包</h2><p>首先，使用以下命令查看系统中已安装的与 <code>ImageMagick</code> 相关的软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -l | grep -i imagemagick</span><br></pre></td></tr></table></figure>

<p>如果系统中确实安装了 <code>ImageMagick</code>，你将看到类似如下的输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ii  imagemagick-6-common                        8:6.9.10.23+dfsg-2.1ubuntu11.10       all          image manipulation programs -- infrastructure</span><br><span class="line">ii  imagemagick-6.q16                           8:6.9.10.23+dfsg-2.1ubuntu11.10       amd64        image manipulation programs -- quantum depth Q16</span><br><span class="line">ii  libmagick++-6.q16-8:amd64                   8:6.9.10.23+dfsg-2.1ubuntu11.10       amd64        C++ interface to ImageMagick -- quantum depth Q16</span><br></pre></td></tr></table></figure>

<h2 id="步骤-2：卸载-ImageMagick-相关包"><a href="#步骤-2：卸载-ImageMagick-相关包" class="headerlink" title="步骤 2：卸载 ImageMagick 相关包"></a>步骤 2：卸载 <code>ImageMagick</code> 相关包</h2><p>接下来，使用 <code>apt-get purge</code> 命令卸载上述软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get purge imagemagick-6-common imagemagick-6.q16 libmagick++-6.q16-8</span><br></pre></td></tr></table></figure>

<p>该命令将彻底删除这些包及其相关配置文件。</p>
<h2 id="步骤-3：清理无用的依赖和残留文件"><a href="#步骤-3：清理无用的依赖和残留文件" class="headerlink" title="步骤 3：清理无用的依赖和残留文件"></a>步骤 3：清理无用的依赖和残留文件</h2><p>卸载软件包后，运行以下命令清理不再需要的依赖和残留文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt autoremove --purge</span><br></pre></td></tr></table></figure>

<p>此命令会自动删除那些与 <code>ImageMagick</code> 相关的、已不再需要的依赖包。</p>
<h2 id="步骤-4：更新系统的应用菜单"><a href="#步骤-4：更新系统的应用菜单" class="headerlink" title="步骤 4：更新系统的应用菜单"></a>步骤 4：更新系统的应用菜单</h2><p>为了确保卸载后的应用不再显示在应用程序栏中，可以更新系统的应用菜单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-desktop-database</span><br></pre></td></tr></table></figure>

<h2 id="步骤-5：重启系统"><a href="#步骤-5：重启系统" class="headerlink" title="步骤 5：重启系统"></a>步骤 5：重启系统</h2><p>最后，建议重启系统以确保所有更改生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，你可以从 Ubuntu 系统中成功卸载 <code>ImageMagick</code> 及其相关的所有组件，同时清理系统中的多余依赖和配置文件。这些步骤可以帮助你更好地管理系统中不再需要的应用程序，释放系统空间。</p>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>卸载应用</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Ubuntu配置Picgo+Typora</title>
    <url>/2024/12/23/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Ubuntu%E9%85%8D%E7%BD%AEPicgo+Typora/</url>
    <content><![CDATA[<h2 id="1、AppImage下载与安装"><a href="#1、AppImage下载与安装" class="headerlink" title="1、AppImage下载与安装"></a>1、AppImage下载与安装</h2><ul>
<li><p>从下方链接下载：</p>
<p><a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.4.0-beta.9/PicGo-2.4.0-beta.9.AppImage">https://github.com/Molunerfinn/PicGo/releases/download/v2.4.0-beta.9/PicGo-2.4.0-beta.9.AppImage</a></p>
<p>下载后右键选择允许以应用程序形式打开：</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223131705271.png" alt="image-20241223131705271" style="zoom:50%;" />

<p>设置完成后，右键点击运行，即可弹出小方块，在方块上右键打开主界面：</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223131812517.png" alt="image-20241223131812517" style="zoom:67%;" />

<p>注意先点击“图片上传-阿里云OSS-Default”，切换到自己的配置项，可在左侧PicGo设置中选择展示哪些图床，我选择阿里云，便宜大碗🤪</p>
</li>
</ul>
<h2 id="2、阿里云OSS控制台账号获取"><a href="#2、阿里云OSS控制台账号获取" class="headerlink" title="2、阿里云OSS控制台账号获取"></a>2、阿里云OSS控制台账号获取</h2><ul>
<li><p>参考下方链接操作，获取ID和Key，必须保存一下，仅显示一次！</p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E9%98%BF%E9%87%8C%E4%BA%91oss">https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E9%98%BF%E9%87%8C%E4%BA%91oss</a></p>
<p><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223131442808.png" alt="image-20241223131442808"></p>
</li>
<li><p>参考上方链接，配置接下来的OSS-Bucket等信息：</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223132115503.png" alt="image-20241223132115503" style="zoom: 67%;" />

<p>确认完成后，返回主界面可以测试一下上传是否成功即可。</p>
</li>
</ul>
<h2 id="3、Typora安装与配置"><a href="#3、Typora安装与配置" class="headerlink" title="3、Typora安装与配置"></a>3、Typora安装与配置</h2><ul>
<li><p>安装：最后一版免费Typora，感谢鱼香ROS大佬保存！</p>
<p><a href="https://fishros.org.cn/forum/topic/23/%E5%AE%89%E8%A3%85typora%E6%9C%80%E5%90%8E%E7%9A%84%E5%85%8D%E8%B4%B9%E7%89%88">https://fishros.org.cn/forum/topic/23/%E5%AE%89%E8%A3%85typora%E6%9C%80%E5%90%8E%E7%9A%84%E5%85%8D%E8%B4%B9%E7%89%88</a></p>
</li>
<li><p>打开Typora，点击：文件-偏好设置-图像，如下图所示：</p>
<p><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223132432287.png" alt="image-20241223132432287"></p>
</li>
<li><p>选择配置如上图所示，上传服务选择Core，然后点击下载（需要网络），下载完成后点击“打开配置文件”，复制上方安装的PicGo中的配置信息，完全粘贴到刚刚打开的配置文件中，保存</p>
<p><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223132635641.png" alt="image-20241223132635641"></p>
</li>
<li><p>修改后，点击“验证图片上传选项”，测试成功即可！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Picgo</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Ubuntu音频切换失败解决方案</title>
    <url>/2025/01/13/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Ubuntu%E9%9F%B3%E9%A2%91%E5%88%87%E6%8D%A2%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>如果Ubuntu没有声音输出，可以尝试以下几种解决方法：</p>
<ol>
<li>检查音量设置：确保音量没有被静音或调到最低。点击系统菜单栏上的音量图标，调整音量设置。</li>
<li>检查音频设备连接：确保音频设备（例如扬声器、耳机等）已正确连接到计算机，并且没有松动或断开。</li>
<li>检查音频输出设备设置：点击系统菜单栏上的音量图标，选择“Sound Settings”（声音设置），在“Output”（输出）选项卡中，确保选择了正确的音频输出设备。</li>
<li>更新驱动程序：打开终端，运行以下命令更新系统的软件包和驱动程序：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<h2 id="1、重启-PulseAudio-服务："><a href="#1、重启-PulseAudio-服务：" class="headerlink" title="1、重启 PulseAudio 服务："></a>1、重启 PulseAudio 服务：</h2><p>在终端中运行以下命令以重启 PulseAudio 服务：（本人尝试这个方法后成功切换）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pulseaudio -k</span><br></pre></td></tr></table></figure>

<ul>
<li>然后，重启电脑，看看是否有声音输出（重启电脑这一步我没有操作，可自行看是否需要重启电脑）</li>
</ul>
<h2 id="2、检查默认音频设备："><a href="#2、检查默认音频设备：" class="headerlink" title="2、检查默认音频设备："></a>2、检查默认音频设备：</h2><p>打开终端，运行以下命令以查看默认音频设备：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aplay -l</span><br></pre></td></tr></table></figure>

<p>然后，编辑 PulseAudio 配置文件，运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/pulse/default.pa</span><br></pre></td></tr></table></figure>

<p>找到以下行并取消注释（删除行前的“#”符号）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load-module module-alsa-sink device=&lt;默认音频设备&gt;</span><br></pre></td></tr></table></figure>

<p>将 <code>&lt;默认音频设备&gt;</code> 替换为 <code>aplay -l</code> 命令中显示的默认音频设备的标识符。保存文件并重启电脑。</p>
<h2 id="3、安装和配置-ALSA-驱动程序："><a href="#3、安装和配置-ALSA-驱动程序：" class="headerlink" title="3、安装和配置 ALSA 驱动程序："></a>3、安装和配置 ALSA 驱动程序：</h2><p>打开终端，运行以下命令以安装 ALSA 驱动程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install alsa-utils</span><br></pre></td></tr></table></figure>

<p>然后，运行以下命令以配置 ALSA 驱动程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo alsa force-reload</span><br></pre></td></tr></table></figure>

<p>重启电脑后，看看是否有声音输出。</p>
<p>如果上述方法仍然无法解决问题，可能需要更深入的故障排除或考虑使用其他音频设备。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.yisu.com/ask/26427066.html</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>音频切换</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】迁移Blogs到其他Ubuntu系统.md</title>
    <url>/2025/02/24/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91%E8%BF%81%E7%A7%BBBlogs%E5%88%B0%E5%85%B6%E4%BB%96Ubuntu%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><p>在 Ubuntu 旧环境下，博客文件夹位于 <code>/home/zhao/Blog</code>，该目录已连接到 GitHub 仓库，并包含 Hexo 相关的配置文件和依赖。希望在 <strong>新 Ubuntu 系统</strong> 下重建该博客环境，并确保与 GitHub 仓库保持同步。然而，在执行 <code>hexo</code> 相关命令时遇到了一些问题，主要包括：</p>
<ol>
<li><code>.gitignore</code> 配置可能导致部分文件未被同步。</li>
<li><code>npx hexo generate</code> 报错 <code>TypeError: Object.fromEntries is not a function</code>，怀疑是 <strong>Node.js 版本过旧</strong>。</li>
<li><code>hexo clean</code> 报错 <code>Command &#39;hexo&#39; not found</code>，怀疑是 <strong>Hexo 未全局安装</strong>。</li>
</ol>
<hr>
<h2 id="2、问题分析与解决方案"><a href="#2、问题分析与解决方案" class="headerlink" title="2、问题分析与解决方案"></a>2、问题分析与解决方案</h2><h3 id="2-1-gitignore-配置检查"><a href="#2-1-gitignore-配置检查" class="headerlink" title="2.1 .gitignore 配置检查"></a><strong>2.1 .gitignore 配置检查</strong></h3><p>在 <code>.gitignore</code> 文件中，以下内容可能影响同步：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.DS_Store</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Thumbs.db</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">db.json</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*.<span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node_modules/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">public/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.deploy*/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">_multiconfig.yml</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>node_modules/</code> 和 <code>public/</code> 目录可以忽略，因为它们可以通过 <code>npm install</code> 和 <code>hexo generate</code> 重新生成。</li>
<li><code>db.json</code> 可能包含 Hexo 的数据缓存，忽略它不会影响博客功能。</li>
</ul>
<p><strong>结论</strong>：<code>.gitignore</code> 并未影响关键文件的同步，因此问题可能出现在 Node.js 版本或 Hexo 安装上。</p>
<hr>
<h3 id="2-2-解决-Node-js-版本过旧问题"><a href="#2-2-解决-Node-js-版本过旧问题" class="headerlink" title="2.2 解决 Node.js 版本过旧问题"></a><strong>2.2 解决 Node.js 版本过旧问题</strong></h3><p><strong>错误信息：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TypeError: Object.fromEntries is not a function</span><br></pre></td></tr></table></figure>

<p><strong>原因：</strong> <code>Object.fromEntries</code> 需要 Node.js 12+，而旧版本 Node.js 可能低于 12.0.0。</p>
<p><strong>解决方案：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查当前 Node.js 版本</span></span><br><span class="line">node -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 Node.js（推荐使用官方 PPA）</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y curl</span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -</span><br><span class="line">sudo apt install -y nodejs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保安装成功</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-3-解决-Hexo-未全局安装问题"><a href="#2-3-解决-Hexo-未全局安装问题" class="headerlink" title="2.3 解决 Hexo 未全局安装问题"></a><strong>2.3 解决 Hexo 未全局安装问题</strong></h3><p><strong>错误信息：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Command &#x27;hexo&#x27; not found</span><br></pre></td></tr></table></figure>

<p><strong>原因：</strong> Hexo 可能只作为 <strong>本地依赖</strong> 存在于 <code>node_modules/</code> 目录中，而没有全局安装。</p>
<p><strong>解决方案 1（推荐）：使用 <code>npx</code> 运行 Hexo</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo generate</span><br><span class="line">npx hexo server</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2（可选）：全局安装 Hexo</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保安装成功</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3、完整的博客环境恢复步骤"><a href="#3、完整的博客环境恢复步骤" class="headerlink" title="3、完整的博客环境恢复步骤"></a>3、完整的博客环境恢复步骤</h2><ol>
<li><strong>安装 Node.js 和 npm</strong>（参考 2.2 章节）。</li>
<li><strong>进入博客目录</strong> 并安装依赖： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/zhao/Blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li><strong>清理缓存并重新生成博客</strong>： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li><strong>本地访问博客</strong>：<br> 在浏览器中打开 <code>http://localhost:4000</code>，检查博客是否正常显示。</li>
<li><strong>同步 GitHub 远程仓库（可选）</strong>： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v  # 确保远程仓库正确</span><br><span class="line">git pull origin main  # 拉取最新代码</span><br></pre></td></tr></table></figure></li>
<li><strong>配置DNS解析</strong><br> 添加CNAME文件到仓库中，内容书写个人网站，此处我的为<code>zhaoyuanhangblogs.top</code>，然后进入仓库设置，选择<code>Pages</code>选项，下滑到DNS解析部分，开启强制HTTPS，并在上方添加同样的网站地址，然后Save，就会自动解析</li>
</ol>
<hr>
<h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>在新 Ubuntu 系统下迁移 Hexo 博客时，可能会遇到 <strong>Node.js 版本过旧</strong> 和 <strong>Hexo 未全局安装</strong> 的问题。通过升级 Node.js、安装 Hexo 依赖以及正确执行 Hexo 命令，可以成功恢复博客环境并同步 GitHub 仓库。</p>
<p>至此，Hexo 博客已成功在新系统下恢复并可正常使用！🎉</p>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Blogs</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识补充】卡尔曼滤波相关问题</title>
    <url>/2024/12/23/%E3%80%90%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85%E3%80%91%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>卡尔曼滤波 Kalman Filter 之美在于什么？ - 自动驾驶之心的回答 - 知乎<br><a href="https://www.zhihu.com/question/281995386/answer/3371567219">https://www.zhihu.com/question/281995386/answer/3371567219</a></li>
</ul>
]]></content>
      <categories>
        <category>知识补充</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>卡尔曼滤波</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统修复】Ubuntu20.04解决关机慢问题</title>
    <url>/2024/12/26/%E3%80%90%E7%B3%BB%E7%BB%9F%E4%BF%AE%E5%A4%8D%E3%80%91Ubuntu20.04%E8%A7%A3%E5%86%B3%E5%85%B3%E6%9C%BA%E6%85%A2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1、问题描述："><a href="#1、问题描述：" class="headerlink" title="1、问题描述："></a>1、问题描述：</h2><p>Linux：关机慢等待 90 秒提示 a stop job is running for XXX</p>
<h2 id="2、解决方法："><a href="#2、解决方法：" class="headerlink" title="2、解决方法："></a>2、解决方法：</h2><ul>
<li>编辑配置文件：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/systemd/system.conf</span><br></pre></td></tr></table></figure>
  修改以下两个参数，比如改为 5s  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DefaultTimeoutStartSec=5s</span><br><span class="line">DefaultTimeoutStopSec=5s</span><br></pre></td></tr></table></figure></li>
<li>重启服务：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>系统修复</category>
      </categories>
      <tags>
        <tag>Ubuntu20.04</tag>
        <tag>关机</tag>
      </tags>
  </entry>
</search>
