<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2025/02/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>【MSFL】1：A-LOAM：从安装到测试</title>
    <url>/2024/12/24/%E3%80%90MSFL%E3%80%911%EF%BC%9AA-LOAM%EF%BC%9A%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="1、安装依赖项"><a href="#1、安装依赖项" class="headerlink" title="1、安装依赖项"></a>1、安装依赖项</h2><ul>
<li>参考之前的博客：【安装学习】ubuntu20.04与A-LOAM：01-安装ceres-solver</li>
<li>注意！仅需顺序执行之前博客操作即可，不需要自行再次源码安装诸如eigen3之类的软件包（通过<code>sudo apt-get</code>安装即可）</li>
</ul>
<h2 id="2、修改代码内容"><a href="#2、修改代码内容" class="headerlink" title="2、修改代码内容"></a>2、修改代码内容</h2><ul>
<li>将四个<code>.cpp</code>文件中的<code>/camera_init</code>修改为<code>camera_init</code></li>
<li>将<code>scanRegistration.cpp中的 #include &lt;opencv/cv.h&gt;</code> 修改为<code>#include &lt;opencv2/imgproc.hpp&gt;</code></li>
<li>修改<code>kittiHelper.cpp</code>中 <code>CV_LOAD_IMAGE_GRAYSCALE</code>为 <code>cv::IMREAD_GRAYSCALE</code></li>
<li>无论之前是否已经<code>catkin_make</code>编译过，都需要重新编译，即删除<code>build/</code>和<code>devel/</code>文件夹后重新执行<code>catkin_make</code>以使上方的<code>ceres</code>库生效</li>
<li>若版本是<code>ubuntu20.04 ros-noetic</code>，也可以使用我修改后的fork仓库：<a href="https://github.com/QianYuan1437/A-LOAM-NOTED.git">https://github.com/QianYuan1437/A-LOAM-NOTED.git</a> 注意branch</li>
</ul>
<h2 id="3、测试与保存"><a href="#3、测试与保存" class="headerlink" title="3、测试与保存"></a>3、测试与保存</h2><ul>
<li>下载测试<code>ROSBAG</code>：<a href="https://drive.google.com/file/d/1s05tBQOLNEDDurlg48KiUWxCp-YqYyGH/view">https://drive.google.com/file/d/1s05tBQOLNEDDurlg48KiUWxCp-YqYyGH/view</a></li>
<li>开启三个终端：注意运行顺序，先1再2最后3<ul>
<li>1、<code>roscore</code></li>
<li>2、<code>roslaunch aloam_velodyne aloam_velodyne_VLP_16.launch</code></li>
<li>3、<code>rosbag play nsh_indoor_outdoor.bag</code></li>
</ul>
</li>
<li>如果需要保存点云信息，则需开启第四个终端<ul>
<li>4、有以下两种方法，但注意运行顺序为1,2,4,3<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#另起终端用bag_to_pcd方法保存点云图</span><br><span class="line">rosrun pcl_ros bag_to_pcd xxx.bag /laser_cloud_surround pcd</span><br></pre></td></tr></table></figure>
运行结束，可以看到生成了一个pcd文件夹，将里面的文件按照修改时间排序，最新的就是最后的点云地图pcd文件。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#另起终端，用pointcloud_to_pcd方法保存点云图</span><br><span class="line">mkdir pcd</span><br><span class="line">cd pcd</span><br><span class="line">rosrun pcl_ros pointcloud_to_pcd input:=/laser_cloud_surround</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>点云地图查看：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcl_viewer xxx.pcd</span><br></pre></td></tr></table></figure>
pcd点云地图转ply格式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pcl_pcd2ply xxx.pcd xxxxxxx.ply</span><br></pre></td></tr></table></figure>
当我们需要用第三方软件（MatLab&#x2F;MeshLab）对点云地图进行处理时就需要将pcd转为ply，其中MeshLab必须使用由pointcloud_to_pcd方法创建pcd转成的ply格式点云！</li>
</ul>
<h2 id="4、参考链接"><a href="#4、参考链接" class="headerlink" title="4、参考链接"></a>4、参考链接</h2><ul>
<li><a href="https://blog.csdn.net/studentu/article/details/119634149">https://blog.csdn.net/studentu/article/details/119634149</a></li>
<li><a href="https://blog.csdn.net/weixin_43910370/article/details/120736760">https://blog.csdn.net/weixin_43910370/article/details/120736760</a></li>
<li><a href="https://blog.csdn.net/weixin_43807148/article/details/113739347">https://blog.csdn.net/weixin_43807148/article/details/113739347</a></li>
<li><a href="https://blog.csdn.net/weixin_44156680/article/details/117705830">https://blog.csdn.net/weixin_44156680/article/details/117705830</a></li>
</ul>
<h2 id="5、MSFL测试参考链接"><a href="#5、MSFL测试参考链接" class="headerlink" title="5、MSFL测试参考链接"></a>5、MSFL测试参考链接</h2><ul>
<li><a href="https://blog.csdn.net/qq_53004665/article/details/141674630">https://blog.csdn.net/qq_53004665/article/details/141674630</a></li>
</ul>
]]></content>
      <categories>
        <category>MSFL</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>MSFL</tag>
        <tag>A-LOAM</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】ubuntu20.04与A-LOAM：01-安装ceres-solver</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91ubuntu20.04%E4%B8%8EA-LOAM%EF%BC%9A01-%E5%AE%89%E8%A3%85ceres-solver/</url>
    <content><![CDATA[<h2 id="1、依赖安装"><a href="#1、依赖安装" class="headerlink" title="1、依赖安装"></a>1、依赖安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install  liblapack-dev libsuitesparse-dev libcxsparse3 libgflags-dev libgoogle-glog-dev libgtest-dev</span><br></pre></td></tr></table></figure>

<h2 id="2、包下载与安装"><a href="#2、包下载与安装" class="headerlink" title="2、包下载与安装"></a>2、包下载与安装</h2><ul>
<li>下载安装包：<a href="http://ceres-solver.org/ceres-solver-2.0.0.tar.gz">http://ceres-solver.org/ceres-solver-2.0.0.tar.gz</a><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#1. 下载ceres2.0版本</span><br><span class="line"># 地址为 http://ceres-solver.org/ceres-solver-2.0.0.tar.gz</span><br><span class="line">#2. 解压</span><br><span class="line">#3. 进入目录，然后编译</span><br><span class="line">cd ceres-solver</span><br><span class="line">mkdir build &amp;&amp; cd build </span><br><span class="line">cmake ..</span><br><span class="line">make -j3</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="3、参考链接"><a href="#3、参考链接" class="headerlink" title="3、参考链接"></a>3、参考链接</h2><p><a href="https://blog.csdn.net/little_white138/article/details/142443296">https://blog.csdn.net/little_white138/article/details/142443296</a></p>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>A-LOAM</tag>
      </tags>
  </entry>
  <entry>
    <title>【MSFL】2：LIO-SAM：从安装到测试</title>
    <url>/2024/12/26/%E3%80%90MSFL%E3%80%912%EF%BC%9ALIO-SAM%EF%BC%9A%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h1 id="1、标定IMU-LiDAR"><a href="#1、标定IMU-LiDAR" class="headerlink" title="1、标定IMU+LiDAR"></a>1、标定IMU+LiDAR</h1><h2 id="1、录制ROS包"><a href="#1、录制ROS包" class="headerlink" title="1、录制ROS包"></a>1、录制ROS包</h2><ul>
<li>录制rosbag，仅需包含imu和lidar数据，具体&#x2F;topic需要自行修改：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rosbag record /imu /velodyne_points -O data/ROSBAG/lidar_imu.bag</span><br></pre></td></tr></table></figure>

<ul>
<li>保存的效果如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhao@zhao:~/WS/msfl_ws$ rosbag info data/ROSBAG/lidar_imu.bag </span><br><span class="line">path:        data/ROSBAG/lidar_imu.bag</span><br><span class="line">version:     2.0</span><br><span class="line">duration:    3:17s (197s)</span><br><span class="line">start:       Jan 01 1970 08:00:03.46 (3.46)</span><br><span class="line">end:         Jan 01 1970 08:03:20.57 (200.57)</span><br><span class="line">size:        384.0 MB</span><br><span class="line">messages:    21684</span><br><span class="line">compression: none [475/475 chunks]</span><br><span class="line">types:       sensor_msgs/Imu         [6a62c6daae103f4ff57a132d6f95cec2]</span><br><span class="line">             sensor_msgs/PointCloud2 [1158d486dd51d683ce2f1be655c3c181]</span><br><span class="line">topics:      /imu               19713 msgs    : sensor_msgs/Imu        </span><br><span class="line">             /velodyne_points    1971 msgs    : sensor_msgs/PointCloud2</span><br></pre></td></tr></table></figure>

<h2 id="2、安装依赖项"><a href="#2、安装依赖项" class="headerlink" title="2、安装依赖项"></a>2、安装依赖项</h2><ul>
<li>nlop包安装：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/stevengj/nlopt</span><br><span class="line"><span class="built_in">cd</span> nlopt</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make -j8</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>

<p>这里可能会遇到在cmake ..的时候有fail现象，提示一些包未找到，为了保证后续运行顺利，我这边还是安装了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install guile-3.0 <span class="comment">#这里我选择的是3.0版本</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get install guile-3.0-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install octave</span><br><span class="line"><span class="built_in">sudo</span> apt-get install liboctave-dev</span><br><span class="line"><span class="built_in">sudo</span> apt-get install swig</span><br></pre></td></tr></table></figure>

<h2 id="3、修改源码"><a href="#3、修改源码" class="headerlink" title="3、修改源码"></a>3、修改源码</h2><ul>
<li>修改 loader.cpp</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;geometry_msgs/TransformStamped.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rosbag/bag.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;rosbag/view.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sensor_msgs/Imu.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lidar_align/loader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;lidar_align/transform.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sensor_msgs/Imu.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> lidar_align &#123;</span><br><span class="line"></span><br><span class="line">Loader::<span class="built_in">Loader</span>(<span class="type">const</span> Config&amp; config) : <span class="built_in">config_</span>(config) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Loader::Config <span class="title">Loader::getConfig</span><span class="params">(ros::NodeHandle* nh)</span> </span>&#123;</span><br><span class="line">  Loader::Config config;</span><br><span class="line">  nh-&gt;<span class="built_in">param</span>(<span class="string">&quot;use_n_scans&quot;</span>, config.use_n_scans, config.use_n_scans);</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Loader::parsePointcloudMsg</span><span class="params">(<span class="type">const</span> sensor_msgs::PointCloud2 msg,</span></span></span><br><span class="line"><span class="params"><span class="function">                                LoaderPointcloud* pointcloud)</span> </span>&#123;</span><br><span class="line">  <span class="type">bool</span> has_timing = <span class="literal">false</span>;</span><br><span class="line">  <span class="type">bool</span> has_intensity = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> sensor_msgs::PointField&amp; field : msg.fields) &#123;</span><br><span class="line">    <span class="keyword">if</span> (field.name == <span class="string">&quot;time_offset_us&quot;</span>) &#123;</span><br><span class="line">      has_timing = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (field.name == <span class="string">&quot;intensity&quot;</span>) &#123;</span><br><span class="line">      has_intensity = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (has_timing) &#123;</span><br><span class="line">    pcl::<span class="built_in">fromROSMsg</span>(msg, *pointcloud);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (has_intensity) &#123;</span><br><span class="line">    Pointcloud raw_pointcloud;</span><br><span class="line">    pcl::<span class="built_in">fromROSMsg</span>(msg, raw_pointcloud);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> Point&amp; raw_point : raw_pointcloud) &#123;</span><br><span class="line">      PointAllFields point;</span><br><span class="line">      point.x = raw_point.x;</span><br><span class="line">      point.y = raw_point.y;</span><br><span class="line">      point.z = raw_point.z;</span><br><span class="line">      point.intensity = raw_point.intensity;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!std::<span class="built_in">isfinite</span>(point.x) || !std::<span class="built_in">isfinite</span>(point.y) ||</span><br><span class="line">          !std::<span class="built_in">isfinite</span>(point.z) || !std::<span class="built_in">isfinite</span>(point.intensity)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pointcloud-&gt;<span class="built_in">push_back</span>(point);</span><br><span class="line">    &#125;</span><br><span class="line">    pointcloud-&gt;header = raw_pointcloud.header;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pcl::PointCloud&lt;pcl::PointXYZ&gt; raw_pointcloud;</span><br><span class="line">    pcl::<span class="built_in">fromROSMsg</span>(msg, raw_pointcloud);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> pcl::PointXYZ&amp; raw_point : raw_pointcloud) &#123;</span><br><span class="line">      PointAllFields point;</span><br><span class="line">      point.x = raw_point.x;</span><br><span class="line">      point.y = raw_point.y;</span><br><span class="line">      point.z = raw_point.z;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!std::<span class="built_in">isfinite</span>(point.x) || !std::<span class="built_in">isfinite</span>(point.y) ||</span><br><span class="line">          !std::<span class="built_in">isfinite</span>(point.z)) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      pointcloud-&gt;<span class="built_in">push_back</span>(point);</span><br><span class="line">    &#125;</span><br><span class="line">    pointcloud-&gt;header = raw_pointcloud.header;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Loader::loadPointcloudFromROSBag</span><span class="params">(<span class="type">const</span> std::string&amp; bag_path,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      <span class="type">const</span> Scan::Config&amp; scan_config,</span></span></span><br><span class="line"><span class="params"><span class="function">                                      Lidar* lidar)</span> </span>&#123;</span><br><span class="line">  rosbag::Bag bag;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    bag.<span class="built_in">open</span>(bag_path, rosbag::bagmode::Read);</span><br><span class="line">  &#125; <span class="built_in">catch</span> (rosbag::BagException e) &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR_STREAM</span>(<span class="string">&quot;LOADING BAG FAILED: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::vector&lt;std::string&gt; types;</span><br><span class="line">  types.<span class="built_in">push_back</span>(std::<span class="built_in">string</span>(<span class="string">&quot;sensor_msgs/PointCloud2&quot;</span>));</span><br><span class="line">  <span class="function">rosbag::View <span class="title">view</span><span class="params">(bag, rosbag::TypeQuery(types))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> scan_num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> rosbag::MessageInstance&amp; m : view) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot; Loading scan: \e[1m&quot;</span> &lt;&lt; scan_num++ &lt;&lt; <span class="string">&quot;\e[0m from ros bag&quot;</span></span><br><span class="line">              &lt;&lt; <span class="string">&#x27;\r&#x27;</span> &lt;&lt; std::flush;</span><br><span class="line"></span><br><span class="line">    LoaderPointcloud pointcloud;</span><br><span class="line">    <span class="built_in">parsePointcloudMsg</span>(*(m.<span class="built_in">instantiate</span>&lt;sensor_msgs::PointCloud2&gt;()),</span><br><span class="line">                       &amp;pointcloud);</span><br><span class="line"></span><br><span class="line">    lidar-&gt;<span class="built_in">addPointcloud</span>(pointcloud, scan_config);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lidar-&gt;<span class="built_in">getNumberOfScans</span>() &gt;= config_.use_n_scans) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (lidar-&gt;<span class="built_in">getTotalPoints</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR_STREAM</span>(</span><br><span class="line">        <span class="string">&quot;No points were loaded, verify that the bag contains populated &quot;</span></span><br><span class="line">        <span class="string">&quot;messages of type sensor_msgs/PointCloud2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Loader::loadTformFromROSBag</span><span class="params">(<span class="type">const</span> std::string&amp; bag_path, Odom* odom)</span> </span>&#123;</span><br><span class="line">  rosbag::Bag bag;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    bag.<span class="built_in">open</span>(bag_path, rosbag::bagmode::Read);</span><br><span class="line">  &#125; <span class="built_in">catch</span> (rosbag::BagException e) &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR_STREAM</span>(<span class="string">&quot;LOADING BAG FAILED: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  std::vector&lt;std::string&gt; types;</span><br><span class="line">  types.<span class="built_in">push_back</span>(std::<span class="built_in">string</span>(<span class="string">&quot;sensor_msgs/Imu&quot;</span>));</span><br><span class="line">  <span class="function">rosbag::View <span class="title">view</span><span class="params">(bag, rosbag::TypeQuery(types))</span></span>;</span><br><span class="line">  <span class="type">size_t</span> imu_num = <span class="number">0</span>;</span><br><span class="line">  <span class="type">double</span> shiftX=<span class="number">0</span>,shiftY=<span class="number">0</span>,shiftZ=<span class="number">0</span>,velX=<span class="number">0</span>,velY=<span class="number">0</span>,velZ=<span class="number">0</span>;</span><br><span class="line">  ros::Time time;</span><br><span class="line">  <span class="type">double</span> timeDiff,lastShiftX,lastShiftY,lastShiftZ;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">const</span> rosbag::MessageInstance&amp; m : view)&#123;</span><br><span class="line">    std::cout &lt;&lt;<span class="string">&quot;Loading imu: \e[1m&quot;</span>&lt;&lt; imu_num++&lt;&lt;<span class="string">&quot;\e[0m from ros bag&quot;</span>&lt;&lt;<span class="string">&#x27;\r&#x27;</span>&lt;&lt; std::flush;</span><br><span class="line"></span><br><span class="line">    sensor_msgs::Imu imu=*(m.<span class="built_in">instantiate</span>&lt;sensor_msgs::Imu&gt;());</span><br><span class="line"></span><br><span class="line">    Timestamp stamp = imu.header.stamp.sec * <span class="number">1000000ll</span> +imu.header.stamp.nsec / <span class="number">1000ll</span>;</span><br><span class="line">    <span class="keyword">if</span>(imu_num==<span class="number">1</span>)&#123;</span><br><span class="line">        time=imu.header.stamp;</span><br><span class="line">            <span class="function">Transform <span class="title">T</span><span class="params">(Transform::Translation(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>),Transform::Rotation(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span></span>;</span><br><span class="line">        odom-&gt;<span class="built_in">addTransformData</span>(stamp, T);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        timeDiff=(imu.header.stamp-time).<span class="built_in">toSec</span>();</span><br><span class="line">        time=imu.header.stamp;</span><br><span class="line">        velX=velX+imu.linear_acceleration.x*timeDiff;</span><br><span class="line">        velY=velX+imu.linear_acceleration.y*timeDiff;</span><br><span class="line">        velZ=velZ+(imu.linear_acceleration.z<span class="number">-9.801</span>)*timeDiff;</span><br><span class="line">        </span><br><span class="line">        lastShiftX=shiftX;</span><br><span class="line">        lastShiftY=shiftY;</span><br><span class="line">        lastShiftZ=shiftZ;</span><br><span class="line">        shiftX=lastShiftX+velX*timeDiff+imu.linear_acceleration.x*timeDiff*timeDiff/<span class="number">2</span>;</span><br><span class="line">        shiftY=lastShiftY+velY*timeDiff+imu.linear_acceleration.y*timeDiff*timeDiff/<span class="number">2</span>;</span><br><span class="line">        shiftZ=lastShiftZ+velZ*timeDiff+(imu.linear_acceleration.z<span class="number">-9.801</span>)*timeDiff*timeDiff/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function">Transform <span class="title">T</span><span class="params">(Transform::Translation(shiftX,shiftY,shiftZ),</span></span></span><br><span class="line"><span class="params"><span class="function">               Transform::Rotation(imu.orientation.w,</span></span></span><br><span class="line"><span class="params"><span class="function">                        imu.orientation.x,</span></span></span><br><span class="line"><span class="params"><span class="function">                        imu.orientation.y,</span></span></span><br><span class="line"><span class="params"><span class="function">                        imu.orientation.z))</span></span>;</span><br><span class="line">        odom-&gt;<span class="built_in">addTransformData</span>(stamp, T);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// std::vector&lt;std::string&gt; types;</span></span><br><span class="line">  <span class="comment">// types.push_back(std::string(&quot;geometry_msgs/TransformStamped&quot;));</span></span><br><span class="line">  <span class="comment">// rosbag::View view(bag, rosbag::TypeQuery(types));</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// size_t tform_num = 0;</span></span><br><span class="line">  <span class="comment">// for (const rosbag::MessageInstance&amp; m : view) &#123;</span></span><br><span class="line">  <span class="comment">//   std::cout &lt;&lt; &quot; Loading transform: \e[1m&quot; &lt;&lt; tform_num++</span></span><br><span class="line">  <span class="comment">//             &lt;&lt; &quot;\e[0m from ros bag&quot; &lt;&lt; &#x27;\r&#x27; &lt;&lt; std::flush;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   geometry_msgs::TransformStamped transform_msg =</span></span><br><span class="line">  <span class="comment">//       *(m.instantiate&lt;geometry_msgs::TransformStamped&gt;());</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   Timestamp stamp = transform_msg.header.stamp.sec * 1000000ll +</span></span><br><span class="line">  <span class="comment">//                     transform_msg.header.stamp.nsec / 1000ll;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//   Transform T(Transform::Translation(transform_msg.transform.translation.x,</span></span><br><span class="line">  <span class="comment">//                                      transform_msg.transform.translation.y,</span></span><br><span class="line">  <span class="comment">//                                      transform_msg.transform.translation.z),</span></span><br><span class="line">  <span class="comment">//               Transform::Rotation(transform_msg.transform.rotation.w,</span></span><br><span class="line">  <span class="comment">//                                   transform_msg.transform.rotation.x,</span></span><br><span class="line">  <span class="comment">//                                   transform_msg.transform.rotation.y,</span></span><br><span class="line">  <span class="comment">//                                   transform_msg.transform.rotation.z));</span></span><br><span class="line">  <span class="comment">//   odom-&gt;addTransformData(stamp, T);</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (odom-&gt;<span class="built_in">empty</span>()) &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR_STREAM</span>(<span class="string">&quot;No odom messages found!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Loader::loadTformFromMaplabCSV</span><span class="params">(<span class="type">const</span> std::string&amp; csv_path, Odom* odom)</span> </span>&#123;</span><br><span class="line">  <span class="function">std::ifstream <span class="title">file</span><span class="params">(csv_path, std::ifstream::in)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">size_t</span> tform_num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (file.<span class="built_in">peek</span>() != EOF) &#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot; Loading transform: \e[1m&quot;</span> &lt;&lt; tform_num++</span><br><span class="line">              &lt;&lt; <span class="string">&quot;\e[0m from csv file&quot;</span> &lt;&lt; <span class="string">&#x27;\r&#x27;</span> &lt;&lt; std::flush;</span><br><span class="line"></span><br><span class="line">    Timestamp stamp;</span><br><span class="line">    Transform T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getNextCSVTransform</span>(file, &amp;stamp, &amp;T)) &#123;</span><br><span class="line">      odom-&gt;<span class="built_in">addTransformData</span>(stamp, T);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lots of potential failure cases not checked</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Loader::getNextCSVTransform</span><span class="params">(std::istream&amp; str, Timestamp* stamp,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 Transform* T)</span> </span>&#123;</span><br><span class="line">  std::string line;</span><br><span class="line">  std::<span class="built_in">getline</span>(str, line);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ignore comment lines</span></span><br><span class="line">  <span class="keyword">if</span> (line[<span class="number">0</span>] == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">std::stringstream <span class="title">line_stream</span><span class="params">(line)</span></span>;</span><br><span class="line">  std::string cell;</span><br><span class="line"></span><br><span class="line">  std::vector&lt;std::string&gt; data;</span><br><span class="line">  <span class="keyword">while</span> (std::<span class="built_in">getline</span>(line_stream, cell, <span class="string">&#x27;,&#x27;</span>)) &#123;</span><br><span class="line">    data.<span class="built_in">push_back</span>(cell);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (data.<span class="built_in">size</span>() &lt; <span class="number">9</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> TIME = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> X = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> Y = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> Z = <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> RW = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> RX = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> RY = <span class="number">7</span>;</span><br><span class="line">  <span class="keyword">constexpr</span> <span class="type">size_t</span> RZ = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">  *stamp = std::<span class="built_in">stoll</span>(data[TIME]) / <span class="number">1000ll</span>;</span><br><span class="line">  *T = <span class="built_in">Transform</span>(Transform::<span class="built_in">Translation</span>(std::<span class="built_in">stod</span>(data[X]), std::<span class="built_in">stod</span>(data[Y]),</span><br><span class="line">                                        std::<span class="built_in">stod</span>(data[Z])),</span><br><span class="line">                 Transform::<span class="built_in">Rotation</span>(std::<span class="built_in">stod</span>(data[RW]), std::<span class="built_in">stod</span>(data[RX]),</span><br><span class="line">                                     std::<span class="built_in">stod</span>(data[RY]), std::<span class="built_in">stod</span>(data[RZ])));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;  <span class="comment">// namespace lidar_align</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改NLOPTConfig.cmake文件位置</p>
<p>将 lidar_align 源码包里的 NLOPTConfig.cmake 复制到 ROS工作空间<strong>msfl_ws&#x2F;src</strong> 路径下面</p>
</li>
<li><p>修改源码CMakeLists.txt文件，添加以下代码：</p>
</li>
</ul>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">set (CMAKE_PREFIX_PATH <span class="string">&quot;/usr/local/lib/cmake/nlopt&quot;</span>)</span><br><span class="line">set(CMAKE_CXX_STANDARD 14)</span><br></pre></td></tr></table></figure>

<ul>
<li>修改launch文件中的包路径</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&lt;arg</span> <span class="string">name=&quot;bag_file&quot;</span> <span class="string">default=&quot;/home/zhao/WS/msfl_ws/data/ROSBAG/lidar_imu.bag&quot;/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="4、运行代码"><a href="#4、运行代码" class="headerlink" title="4、运行代码"></a>4、运行代码</h2><p>启动代码进行标定</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catkin_make <span class="comment">#此处建议先删除之前的build/ devel/</span></span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">roslaunch lidar_align lidar_align.launch</span><br></pre></td></tr></table></figure>

<p>运行结果如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zhao@zhao:~/WS/msfl_ws$ roslaunch lidar_align lidar_align.launch </span><br><span class="line">... logging to /home/zhao/.ros/log/24f28d9c-c332-11ef-a81b-25d9e051409d/roslaunch-zhao-83450.<span class="built_in">log</span></span><br><span class="line">Checking <span class="built_in">log</span> directory <span class="keyword">for</span> disk usage. This may take a <span class="keyword">while</span>.</span><br><span class="line">Press Ctrl-C to interrupt</span><br><span class="line">Done checking <span class="built_in">log</span> file disk usage. Usage is &lt;1GB.</span><br><span class="line"></span><br><span class="line">started roslaunch server http://zhao:41241/</span><br><span class="line"></span><br><span class="line">SUMMARY</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">PARAMETERS</span><br><span class="line"> * /lidar_align/input_bag_path: /home/zhao/WS/msf...</span><br><span class="line"> * /lidar_align/input_csv_path: PATH/TO/YOUR.csv</span><br><span class="line"> * /lidar_align/output_calibration_path: /home/zhao/WS/msf...</span><br><span class="line"> * /lidar_align/output_pointcloud_path: /home/zhao/WS/msf...</span><br><span class="line"> * /lidar_align/transforms_from_csv: False</span><br><span class="line"> * /rosdistro: noetic</span><br><span class="line"> * /rosversion: 1.17.0</span><br><span class="line"></span><br><span class="line">NODES</span><br><span class="line">  /</span><br><span class="line">    lidar_align (lidar_align/lidar_align_node)</span><br><span class="line"></span><br><span class="line">ROS_MASTER_URI=http://localhost:11311</span><br><span class="line"></span><br><span class="line">process[lidar_align-1]: started with pid [83464]</span><br><span class="line">[ INFO] [1735198105.395046732]: Loading Pointcloud Data...</span><br><span class="line">[ INFO] [1735198107.504482765]: Loading Transformation Data...                                </span><br><span class="line">[ INFO] [1735198107.640942368]: Interpolating Transformation Data...                          </span><br><span class="line">[ INFO] [1735198109.247437244]: Performing Global Optimization...                             </span><br><span class="line">[ INFO] [1735198300.233199926]: Performing Local Optimization...                                </span><br><span class="line">[ INFO] [1735198309.992561542]: Saving Aligned Pointcloud...                                     eration: 204</span><br><span class="line">[ INFO] [1735198310.543539562]: Saving Calibration File...                                </span><br><span class="line">[ INFO] [1735198310.543604514]: Final Calibration:                                </span><br><span class="line">Active Transformation Vector (x,y,z,rx,ry,rz) from the Pose Sensor Frame to  the Lidar Frame:</span><br><span class="line">[0, 0, 0, -1.39626, 0.465421, 0]</span><br><span class="line"></span><br><span class="line">Active Transformation Matrix from the Pose Sensor Frame to  the Lidar Frame:</span><br><span class="line"> 0.909884 -0.270347  0.314679         0</span><br><span class="line">-0.270347  0.188959  0.944038         0</span><br><span class="line">-0.314679 -0.944038 0.0988438         0</span><br><span class="line">        0         0         0         1</span><br><span class="line"></span><br><span class="line">Active Translation Vector (x,y,z) from the Pose Sensor Frame to  the Lidar Frame:</span><br><span class="line">[0, 0, 0]</span><br><span class="line"></span><br><span class="line">Active Hamiltonen Quaternion (w,x,y,z) the Pose Sensor Frame to  the Lidar Frame:</span><br><span class="line">[0.74123, -0.636805, 0.212268, 0]</span><br><span class="line"></span><br><span class="line">Time offset that must be added to lidar timestamps <span class="keyword">in</span> seconds:</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">ROS Static TF Publisher: &lt;node pkg=<span class="string">&quot;tf&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;static_transform_publisher&quot;</span> name=<span class="string">&quot;pose_lidar_broadcaster&quot;</span> args=<span class="string">&quot;0 0 0 -0.636805 0.212268 0 0.74123 POSE_FRAME LIDAR_FRAME 100&quot;</span> /&gt;</span><br><span class="line">[lidar_align-1] process has finished cleanly</span><br><span class="line"><span class="built_in">log</span> file: /home/zhao/.ros/log/24f28d9c-c332-11ef-a81b-25d9e051409d/lidar_align-1*.<span class="built_in">log</span></span><br><span class="line">all processes on machine have died, roslaunch will <span class="built_in">exit</span></span><br><span class="line">shutting down processing monitor...</span><br><span class="line">... shutting down processing monitor complete</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<h1 id="2、对比调试数据发布信息"><a href="#2、对比调试数据发布信息" class="headerlink" title="2、对比调试数据发布信息"></a>2、对比调试数据发布信息</h1><h2 id="1、检查rosbag中的topic"><a href="#1、检查rosbag中的topic" class="headerlink" title="1、检查rosbag中的topic"></a>1、检查<code>rosbag</code>中的<code>topic</code></h2><p>检查LIO-SAM开源数据包与个人实际录制数据包中的<code>topic</code>信息，发现<code>imu</code>这一消息类型中，个人录制数据包中四元数错误</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241226222051020.png" alt="image-20241226222051020" style="zoom:67%;" />

<p>此图为<code>walking_dataset.bag</code>中<code>/imu_raw</code>话题的输出结果，可以看到<code>orientation</code>这一个四元数是正确的</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241226222319709.png" alt="image-20241226222319709" style="zoom:67%;" />

<p>此图为<code>msfl.bag</code>中的<code>/imu</code>话题的输出结果，可以看到<code>orientation</code>这个四元数是错误的</p>
<h2 id="2、中继发布-imu数据"><a href="#2、中继发布-imu数据" class="headerlink" title="2、中继发布/imu数据"></a>2、中继发布<code>/imu</code>数据</h2><h2 id="3、注意到IMU的内参也要标定"><a href="#3、注意到IMU的内参也要标定" class="headerlink" title="3、注意到IMU的内参也要标定"></a>3、注意到IMU的内参也要标定</h2><ul>
<li>参考链接：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/qq_43112859/article/details/132879387</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>MSFL</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>MSFL</tag>
        <tag>LIO-SAM</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】安装Cartographer ROS（noetic）</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E5%AE%89%E8%A3%85Cartographer%20ROS%EF%BC%88noetic%EF%BC%89/</url>
    <content><![CDATA[<h1 id="【安装学习】安装Cartographer-ROS（noetic）"><a href="#【安装学习】安装Cartographer-ROS（noetic）" class="headerlink" title="【安装学习】安装Cartographer ROS（noetic）"></a>【安装学习】安装Cartographer ROS（noetic）</h1><p> 参考链接：<a href="https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html">https://google-cartographer-ros.readthedocs.io/en/latest/compilation.html</a></p>
<h2 id="1、创建工作空间"><a href="#1、创建工作空间" class="headerlink" title="1、创建工作空间"></a>1、创建工作空间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_google_ws/src</span><br><span class="line"><span class="built_in">cd</span> catkin_google_ws/src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure>

<h2 id="2、安装工具"><a href="#2、安装工具" class="headerlink" title="2、安装工具"></a>2、安装工具</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y python3-wstool python3-rosdep ninja-build stow</span><br></pre></td></tr></table></figure>

<h2 id="3、初始化工作空间"><a href="#3、初始化工作空间" class="headerlink" title="3、初始化工作空间"></a>3、初始化工作空间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> catkin_google_ws</span><br><span class="line">wstool init src</span><br><span class="line">wstool merge -t src https://raw.githubusercontent.com/cartographer-project/cartographer_ros/master/cartographer_ros.rosinstall</span><br><span class="line">wstool update -t src</span><br></pre></td></tr></table></figure>

<h2 id="4、安装依赖"><a href="#4、安装依赖" class="headerlink" title="4、安装依赖"></a>4、安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pip install rosdepc</span><br><span class="line"><span class="built_in">sudo</span> rosdepc init</span><br><span class="line">rosdepc update</span><br></pre></td></tr></table></figure>

<h2 id="5、Libabsl-dev处理"><a href="#5、Libabsl-dev处理" class="headerlink" title="5、Libabsl-dev处理"></a>5、Libabsl-dev处理</h2><p>进行XML文件修改，路径为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cartographer_ws/src/cartographer/package.xml</span><br></pre></td></tr></table></figure>

<p>找到第46行<code>&lt;depend&gt;libabsl-dev&lt;/depend&gt;</code>删掉</p>
<h2 id="6、执行rosdep-install命令"><a href="#6、执行rosdep-install命令" class="headerlink" title="6、执行rosdep install命令"></a>6、执行rosdep install命令</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rosdep update</span><br><span class="line">rosdep install --from-paths src --ignore-src --rosdistro=$&#123;ROS_DISTRO&#125; -y</span><br></pre></td></tr></table></figure>

<h2 id="7、安装abseil库"><a href="#7、安装abseil库" class="headerlink" title="7、安装abseil库"></a>7、安装abseil库</h2><ul>
<li><p>先删除本地abseil库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get remove ros-<span class="variable">$&#123;ROS_DISTRO&#125;</span>-abseil-cpp</span><br></pre></td></tr></table></figure>
</li>
<li><p>再运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">src/cartographer/scripts/install_abseil.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>这时发现可能会报错，类型如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* existing target is neither a <span class="built_in">link</span> nor a directory: include/absl/base/internal/sysinfo.h</span><br></pre></td></tr></table></figure>
</li>
<li><p>定位到上方.sh脚本运行后下载的文件夹，与src文件夹同级，进行如下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/path/to/abseil-cpp</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake -DCMAKE_POSITION_INDEPENDENT_CODE=TRUE -DCMAKE_BUILD_TYPE=Release ..</span><br><span class="line">make -j$(<span class="built_in">nproc</span>)</span><br><span class="line"><span class="built_in">sudo</span> make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>确保编译器可以找到安装的 <code>abseil-cpp</code> 库。检查 <code>LD_LIBRARY_PATH</code> 和 <code>CMAKE_PREFIX_PATH</code> 中是否包含 <code>/usr/local/lib</code> 和 <code>/usr/local</code>，以确保 CMake 和 linker 能找到 <code>abseil-cpp</code> 库。请在终端中执行下方命令，以将这些变量永久添加到 <code>~/.bashrc</code> 里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export CMAKE_PREFIX_PATH=/usr/local:$CMAKE_PREFIX_PATH&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8、构建"><a href="#8、构建" class="headerlink" title="8、构建"></a>8、构建</h2><p>在 <code>catkin_ws</code> 中清理 <code>build_isolated</code> 和 <code>devel_isolated</code> 文件夹后重新构建：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/WS/catkin_ws</span><br><span class="line"><span class="built_in">rm</span> -rf build_isolated devel_isolated install_isolated</span><br><span class="line">catkin_make_isolated --install --use-ninja</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】ubuntu环境配置AMD显卡驱动</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91ubuntu%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AEAMD%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="ubuntu环境配置AMD显卡驱动"><a href="#ubuntu环境配置AMD显卡驱动" class="headerlink" title="ubuntu环境配置AMD显卡驱动"></a>ubuntu环境配置AMD显卡驱动</h1><p>本人买的AMD显卡，最近要在ubuntu环境做python深度学习，所以必须折腾一番，结果发现还不复杂。本人的系统是Ubuntu 20.04.6，显卡是RX6600，亲测有效。</p>
<ul>
<li><p>针对GEM12 MAX 板载的显卡680M，应当选择6.1版本的.deb文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://repo.radeon.com/amdgpu-install/6.1/ubuntu/focal/</span><br></pre></td></tr></table></figure>
</li>
<li><p>对应的pytorch安装命令，应当修改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install torch==2.4.1 torchvision==0.19.1 torchaudio==2.4.1 --index-url https://download.pytorch.org/whl/rocm6.1</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="0-如果已经配置了显卡驱动但是没有成功，或配置成功想更换版本，则先卸载原有的驱动，重新开始："><a href="#0-如果已经配置了显卡驱动但是没有成功，或配置成功想更换版本，则先卸载原有的驱动，重新开始：" class="headerlink" title="(0) 如果已经配置了显卡驱动但是没有成功，或配置成功想更换版本，则先卸载原有的驱动，重新开始："></a>(0) 如果已经配置了显卡驱动但是没有成功，或配置成功想更换版本，则先卸载原有的驱动，重新开始：</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">~$ sudo amdgpu-install <span class="comment">--uninstall</span></span><br></pre></td></tr></table></figure>

<h4 id="1-在AMD官网下载需要的驱动包："><a href="#1-在AMD官网下载需要的驱动包：" class="headerlink" title="(1) 在AMD官网下载需要的驱动包："></a>(1) 在AMD官网下载需要的驱动包：</h4><p><a href="https://link.csdn.net/?target=https://www.amd.com/en/support/kb/release-notes/rn-amdgpu-unified-linux-22-20?login=from_csdn">驱动包链接</a><br>得到amdgpu-install_xxx_all.deb（xxx是版本号）</p>
<h4 id="2-cd到驱动包路径下，安装驱动包："><a href="#2-cd到驱动包路径下，安装驱动包：" class="headerlink" title="(2) cd到驱动包路径下，安装驱动包："></a>(2) cd到驱动包路径下，安装驱动包：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">sudo</span> apt install ./amdgpu-install_xxx_all.deb</span></span><br></pre></td></tr></table></figure>

<h4 id="3-更新软件："><a href="#3-更新软件：" class="headerlink" title="(3) 更新软件："></a>(3) 更新软件：</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">~<span class="variable">$ </span>sudo apt update</span><br><span class="line">~<span class="variable">$ </span>sudo apt upgrade -y</span><br></pre></td></tr></table></figure>

<h4 id="4-安装驱动："><a href="#4-安装驱动：" class="headerlink" title="(4) 安装驱动："></a>(4) 安装驱动：</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">~<span class="variable">$ </span>sudo amdgpu-install --no-dkms</span><br><span class="line">~<span class="variable">$ </span>sudo apt install rocm-dev</span><br><span class="line">~<span class="variable">$ </span>sudo reboot</span><br><span class="line"><span class="comment"># 等待重启</span></span><br></pre></td></tr></table></figure>

<h4 id="5-配置环境："><a href="#5-配置环境：" class="headerlink" title="(5)配置环境："></a>(5)配置环境：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">ls</span> -l /dev/dri/render*</span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">sudo</span> usermod -a -G render <span class="variable">$LOGNAME</span></span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">sudo</span> usermod -a -G video <span class="variable">$LOGNAME</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="variable">$LOGNAME</span>不需要修改</span></span><br><span class="line"><span class="meta prompt_">~$ </span><span class="language-bash"><span class="built_in">sudo</span> reboot</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">等待重启</span></span><br></pre></td></tr></table></figure>

<h4 id="6-理论上如果一路上没有报错，便配置成功了，可以输入下列命令验证"><a href="#6-理论上如果一路上没有报错，便配置成功了，可以输入下列命令验证" class="headerlink" title="(6) 理论上如果一路上没有报错，便配置成功了，可以输入下列命令验证"></a>(6) 理论上如果一路上没有报错，便配置成功了，可以输入下列命令验证</h4><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">~<span class="variable">$ </span>rocm-smi</span><br><span class="line"><span class="comment"># 监控GPU性能</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">~$ <span class="regexp">/opt/</span>rocm<span class="regexp">/bin/</span>rocminfo</span><br><span class="line"><span class="comment"># 可以查询到CPU、GPU信息</span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">~$ <span class="regexp">/opt/</span>rocm<span class="regexp">/opencl/</span>bin/clinfo</span><br><span class="line"><span class="comment"># 可以查询到GPU信息</span></span><br></pre></td></tr></table></figure>

<p>若以上三条命令都有正常输出，便是配置成功了</p>
<h4 id="（7）接下来，如果有利用GPU进行pytorch深度学习的需求，可以进行python程序验证，简单的指令例如："><a href="#（7）接下来，如果有利用GPU进行pytorch深度学习的需求，可以进行python程序验证，简单的指令例如：" class="headerlink" title="（7）接下来，如果有利用GPU进行pytorch深度学习的需求，可以进行python程序验证，简单的指令例如："></a>（7）接下来，如果有利用GPU进行pytorch深度学习的需求，可以进行python程序验证，简单的指令例如：</h4><figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line">python3</span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python"><span class="keyword">import</span> torch</span></span><br><span class="line"><span class="meta prompt_">&gt;&gt;&gt;</span> <span class="language-python">torch.cuda.is_available()</span></span><br></pre></td></tr></table></figure>

<p>返回True就说明成功啦</p>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】安装OpenSSH服务</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E5%AE%89%E8%A3%85OpenSSH%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<ul>
<li><p>安装服务端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install openssh-server </span><br></pre></td></tr></table></figure>
</li>
<li><p>检查是否开启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ps -e | grep ssh</span><br></pre></td></tr></table></figure>

<p>有输出则证明开启，没有的话手动开启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> service ssh start</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看IP地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> ifconfig </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】安装ROS包LIO-SAM(noetic)</title>
    <url>/2024/12/23/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E5%AE%89%E8%A3%85ROS%E5%8C%85LIO-SAM(noetic)/</url>
    <content><![CDATA[<h2 id="1、参考"><a href="#1、参考" class="headerlink" title="1、参考"></a>1、参考</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/TixiaoShan/LIO-SAM</span><br><span class="line"></span><br><span class="line">https://blog.csdn.net/qq_41690864/article/details/118711743</span><br><span class="line">（标题名：3维SLAM入门 LIO-SAM的安装与运行 ubuntu18.04+ros melodic）</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="2、操作流程"><a href="#2、操作流程" class="headerlink" title="2、操作流程"></a>2、操作流程</h2><ul>
<li><p>安装依赖程序，参考issues#206</p>
</li>
<li><p><strong>Step 1：</strong> Install GTSAM 4.0.3 binary</p>
</li>
<li><p><strong>Step 2：</strong> Configure the utility.h to use<br><code>#include &lt;opencv2/opencv.hpp&gt;</code> instead of <code>#include &lt;opencv/cv.h&gt;</code></p>
</li>
<li><p><strong>Step 3：</strong> Configure CMakeLists.txt to use<br><code>set(CMAKE_CXX_FLAGS &quot;-std=c++14&quot;)</code> instead of <code>set(CMAKE_CXX_FLAGS &quot;-std=c++11&quot;)</code></p>
</li>
<li><p><strong>Step 4：</strong>Move <code>#include &lt;opencv2/opencv.hpp&gt;</code> after the <code>pcl</code> headers</p>
</li>
<li><pre><code># 进行Step1的安装
cd ~/catkin_ws/src
git clone https://github.com/TixiaoShan/LIO-SAM.git
# 进行如上Step2~4的修改
cd ..
catkin_make
echo &quot;source ~/你的工作空间/devel/setup.bash&quot; &gt;&gt; ~/.bashrc
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 3、验证操作</span><br><span class="line"></span><br><span class="line">- **Step 1：**下载数据集rosbag文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>
https://drive.google.com/drive/folders/1gJHwfdHCRdjP7vuT556pv8atqrCJPbUq
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **Step 2：**运行roslaunch，另开一个窗口播放rosbag</span><br><span class="line"></span><br></pre></td></tr></table></figure>
roslaunch lio-sam run.launch
rosbag play ~/catkin_ws/src/data/下载的rosbag包.bag
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **Step3：**保存pcd建图结果</span><br><span class="line"></span><br><span class="line">  - 首先，需要修改params.yaml中的参数。params.yaml在~/catkin_ws/src/LIO-SAM/config文件夹下。修改该文件中SavePCD：true 和保存地址。</span><br><span class="line"></span><br><span class="line">  - 然后，为了避免保存还没完成，ros就已经关闭了节点，需要设置_TIMEOUT_SIGINT的值。按如下命令打开文件：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  sudo gedit /opt/ros/melodic/lib/python2.7/dist-packages/roslaunch/nodeprocess.py
</code></pre>
<p>  在文件中找到_TIMEOUT_SIGINT，并设置为100秒。这样，在命令窗口中按下Ctrl+C来结束run.launch的运行时，便会自动将pcd文件保存到指定地址。</p>
</li>
</ul>
<h2 id="4、pointcloud-to-laserscan"><a href="#4、pointcloud-to-laserscan" class="headerlink" title="4、pointcloud_to_laserscan"></a>4、pointcloud_to_laserscan</h2><ul>
<li>注意从github下载的源码要选择luner版本的</li>
</ul>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>【思考杂谈】计划三两事</title>
    <url>/2024/12/23/%E3%80%90%E6%80%9D%E8%80%83%E6%9D%82%E8%B0%88%E3%80%91%E8%AE%A1%E5%88%92%E4%B8%89%E4%B8%A4%E4%BA%8B/</url>
    <content><![CDATA[<h2 id="VGICP"><a href="#VGICP" class="headerlink" title="VGICP"></a>VGICP</h2><p>看到说是更高级的ICP匹配方法，没试过，不知道和NDP匹配相比哪个强一些</p>
<h2 id="LIO-SAM"><a href="#LIO-SAM" class="headerlink" title="LIO-SAM"></a>LIO-SAM</h2><p>今天才发现之前的IMU偏移问题是因为我仿真的是6轴的IMU，真的我哭死</p>
]]></content>
      <categories>
        <category>思考杂谈</category>
      </categories>
      <tags>
        <tag>计划</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>【安装学习】设置对.mkv视频的播放支持</title>
    <url>/2024/12/24/%E3%80%90%E5%AE%89%E8%A3%85%E5%AD%A6%E4%B9%A0%E3%80%91%E8%AE%BE%E7%BD%AE%E5%AF%B9.mkv%E8%A7%86%E9%A2%91%E7%9A%84%E6%92%AD%E6%94%BE%E6%94%AF%E6%8C%81/</url>
    <content><![CDATA[<h2 id="1、安装依赖"><a href="#1、安装依赖" class="headerlink" title="1、安装依赖"></a>1、安装依赖</h2><p>安装 <code>ubuntu-restricted-extras</code>，<code>ubuntu-restricted-extras</code> 包含常用的多媒体编解码器，包括支持 MKV 格式的解码器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install ubuntu-restricted-extras</span><br></pre></td></tr></table></figure>

<p>注意！Ubuntu终端显示文本让选择确定，OK等等：首先按下”TAB”键,会看到选中文本”确定”,”OK”然后按下回车键,即可!</p>
<h2 id="2、成功"><a href="#2、成功" class="headerlink" title="2、成功"></a>2、成功</h2><h2 id="3、变速保存"><a href="#3、变速保存" class="headerlink" title="3、变速保存"></a>3、变速保存</h2><p>可以使用 ffmpeg 将视频转换为3倍速播放的 mp4 格式。以下是具体操作步骤</p>
<p>在终端中执行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 2024-12-24_15-32-53.mkv -filter:v &quot;setpts=PTS/3&quot; -an -c:v libx264 -preset fast -crf 23 2024-12-24_15-32-53_3x.mp4</span><br></pre></td></tr></table></figure>

<p>解释</p>
<ul>
<li><strong><code>-i 2024-12-24_15-32-53.mkv</code></strong>: 指定输入文件。</li>
<li><strong><code>-filter:v &quot;setpts=PTS/3&quot;</code></strong>: 使用 <code>setpts</code> 过滤器将视频播放速度调整为原来的3倍速。<code>PTS/3</code> 表示时间戳变为原来的1&#x2F;3。</li>
<li><strong><code>-an</code></strong>: 删除音频轨道。如果需要加快音频速度，见下方。</li>
<li><strong><code>-c:v libx264</code></strong>: 使用 H.264 编解码器。</li>
<li><strong><code>-preset fast</code></strong>: 选择快速编码预设。</li>
<li><strong><code>-crf 23</code></strong>: 设置视频质量，<code>23</code> 为默认值，数值越小质量越高（如需要更高质量可以调低）。</li>
<li><strong><code>2024-12-24_15-32-53_3x.mp4</code></strong>: 指定输出文件名。</li>
</ul>
<hr>
<p>如果需要保留并加速音频，音频也需要同步加速，可以使用以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 2024-12-24_15-32-53.mkv -filter_complex &quot;[0:v]setpts=PTS/3[v];[0:a]atempo=3[a]&quot; -map &quot;[v]&quot; -map &quot;[a]&quot; -c:v libx264 -preset fast -crf 23 2024-12-24_15-32-53_3x.mp4</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>[0:v]setpts=PTS/3[v]</code></strong>: 设置视频为3倍速。</li>
<li><strong><code>[0:a]atempo=3[a]</code></strong>: 将音频加速3倍。<code>atempo</code> 最大支持2倍速，可多次链式叠加（例如 6倍速可用 <code>atempo=2,atempo=3</code>）。</li>
</ul>
<hr>
<p>最终文件检查：转码完成后，可以使用以下命令检查输出文件信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffmpeg -i 2024-12-24_15-32-53_3x.mp4</span><br></pre></td></tr></table></figure>

<p>这样可以确认视频和音频是否按预期处理。如果还有其他需求，随时告诉我！ 😊</p>
]]></content>
      <categories>
        <category>安装学习</category>
      </categories>
      <tags>
        <tag>安装</tag>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>mkv</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Blogs上传新文章</title>
    <url>/2024/12/23/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Blogs%E4%B8%8A%E4%BC%A0%E6%96%B0%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h2 id="1、Blogs搭建操作"><a href="#1、Blogs搭建操作" class="headerlink" title="1、Blogs搭建操作"></a>1、Blogs搭建操作</h2><h2 id="2、主题替换与设置"><a href="#2、主题替换与设置" class="headerlink" title="2、主题替换与设置"></a>2、主题替换与设置</h2><h2 id="3、分类和标签设置"><a href="#3、分类和标签设置" class="headerlink" title="3、分类和标签设置"></a>3、分类和标签设置</h2><h2 id="4、书写笔记和上传"><a href="#4、书写笔记和上传" class="headerlink" title="4、书写笔记和上传"></a>4、书写笔记和上传</h2><ul>
<li>在路径<code>/source</code>下添加<code>.md</code>新文件，复制抬头中的<code>categories</code>和<code>tags</code>等信息，具体如下：  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: 【技能学习】Blogs上传新文章</span><br><span class="line">title: 【技能学习】Blogs上传新文章</span><br><span class="line">date: 2024-12-23</span><br><span class="line">categories:</span><br><span class="line">  - 技能学习</span><br><span class="line">tags:</span><br><span class="line">  - Blogs</span><br><span class="line">  - 学习</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
<li>终端运行如下指令，进行静态资源生成和上载至Git仓库  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Blogs</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Git中Clone仓库后更新与推送本人仓库</title>
    <url>/2024/12/23/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Git%E4%B8%ADClone%E4%BB%93%E5%BA%93%E5%90%8E%E6%9B%B4%E6%96%B0%E4%B8%8E%E6%8E%A8%E9%80%81%E6%9C%AC%E4%BA%BA%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<h2 id="1、创建fork分支"><a href="#1、创建fork分支" class="headerlink" title="1、创建fork分支"></a>1、创建fork分支</h2><ul>
<li><p>找到别人的仓库地址，创建fork分支</p>
<p>以<a href="https://github.com/HKUST-Aerial-Robotics/A-LOAM.git%E4%B8%BA%E4%BE%8B%EF%BC%8C%E5%88%9B%E5%BB%BA%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BAfork%EF%BC%9A">https://github.com/HKUST-Aerial-Robotics/A-LOAM.git为例，创建如下图所示fork：</a><br><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223125247243.png" alt="image-20241223125247243"></p>
</li>
<li><p>在个人项目中的src&#x2F;中，下载项目代码并编译（依据个人工作空间环境作出适当修改）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/HKUST-Aerial-Robotics/A-LOAM.git</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2、替换子模块的远程地址"><a href="#2、替换子模块的远程地址" class="headerlink" title="2、替换子模块的远程地址"></a>2、替换子模块的远程地址</h2><p>在<code>msfl_ws</code>工作空间中，将<code>A-LOAM-NOTED</code>子模块指向你 Fork 的版本。</p>
<ul>
<li>进入<code>A-LOAM-NOTED</code>子模块目录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src/A-LOAM-NOTED</span><br></pre></td></tr></table></figure>

<ul>
<li>修改远程地址</li>
</ul>
<p>​	将子模块的远程地址替换为你的 Fork 仓库地址（以下示例使用你的 GitHub 用户名<code>YourUsername</code>）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://github.com/YourUsername/A-LOAM-NOTED.git</span><br></pre></td></tr></table></figure>

<ul>
<li>验证远程地址</li>
</ul>
<p>​	确认远程地址已被修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure>

<p>​	输出应显示类似以下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">origin  https://github.com/YourUsername/A-LOAM-NOTED.git (fetch)</span><br><span class="line">origin  https://github.com/YourUsername/A-LOAM-NOTED.git (push)</span><br></pre></td></tr></table></figure>

<h2 id="3、修改提交到-Fork-仓库"><a href="#3、修改提交到-Fork-仓库" class="headerlink" title="3、修改提交到 Fork 仓库"></a>3、修改提交到 Fork 仓库</h2><ul>
<li><p>在<code>A-LOAM-NOTED</code>目录中，确认当前分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>提交修改</p>
<p>将本地的修改提交到当前分支，或创建一个新分支来提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b ubuntu20.04-mods</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Adapted A-LOAM-NOTED for Ubuntu 20.04&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>推送到你的 Fork 仓库</p>
<p>将修改个体到 Fork 仓库的分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin ubuntu20.04-mods</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4、更新主仓库对子模块的引用"><a href="#4、更新主仓库对子模块的引用" class="headerlink" title="4、更新主仓库对子模块的引用"></a>4、更新主仓库对子模块的引用</h2><p>在主仓库中，更新<code>A-LOAM-NOTED</code>的子引用模块，指向你的 Fork 仓库和分支</p>
<ul>
<li><p>返回主仓库目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新子模块引用</p>
<p>修改子模块配置，导出指向你的Fork仓库和分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -f .gitmodules submodule.src/A-LOAM-NOTED.url https://github.com/YourUsername/A-LOAM-NOTED.git</span><br><span class="line">git config -f .gitmodules submodule.src/A-LOAM-NOTED.branch ubuntu20.04-mods</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步子模块</p>
<p>同步子模块的配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule <span class="built_in">sync</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>提交更新</p>
<p>将主仓库对子模块的更新提交：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .gitmodules src/A-LOAM-NOTED</span><br><span class="line">git commit -m <span class="string">&quot;Updated submodule A-LOAM-NOTED to fork repository&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Tips：一般到这里就完成了"><a href="#Tips：一般到这里就完成了" class="headerlink" title="Tips：一般到这里就完成了"></a>Tips：一般到这里就完成了</h2><h2 id="5、验证-Fork-和更新"><a href="#5、验证-Fork-和更新" class="headerlink" title="5、验证 Fork 和更新"></a>5、验证 Fork 和更新</h2><ul>
<li><p>验证主仓库对子模块的引用</p>
<p>运行以下命令，确认子模块已指向你的Fork仓库和分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule status</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证远程仓库同步</p>
<p>在其他工作空间中克隆主仓库时，确保正确取模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/YourUsername/msfl_ws.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果已存在本地仓库，更新子模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="Tips：修改branch及同步"><a href="#Tips：修改branch及同步" class="headerlink" title="Tips：修改branch及同步"></a>Tips：修改branch及同步</h2><ul>
<li><p>远程仓库设置：当<code>fork</code>的分支使用的是<code>master</code>等名称时，需要进入到项目的设置中，选择<code>branch</code>，点击<code>rename</code></p>
</li>
<li><p>本地仓库设置：在本地的子模块中，首先进行分支重命名，执行如下指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m master main</span><br></pre></td></tr></table></figure>

<p>运行后执行<code>git branch</code>操作，输出会显示<code>*main</code>表示已经成功重命名本地分支，后续进行<code>push</code>操作即可</p>
</li>
<li><p>注意如果运行<code>git push</code>操作等其他操作时让你重新输出用户名和密码，证明之前检查<code>git remote -v</code>的输出是<code>https</code>链接的，已经被<code>github</code>弃用了，但之前肯定你配置了<code>ssh</code>链接，那就不需要重新配置，只需运行下述指令，重新将本地库链接修改为以<code>git</code>链接的即可，即修改下方的<code>QianYuan1437/LIO-SAM-Modified.git</code>为自己的<code>fork</code>仓库，其余信息与上方操作2提到的一致</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git@github.com:QianYuan1437/LIO-SAM-Modified.git</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】ROS使用Ctrl+C关闭太慢怎么解决</title>
    <url>/2025/01/06/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91ROS%E4%BD%BF%E7%94%A8Ctrl+C%E5%85%B3%E9%97%AD%E5%A4%AA%E6%85%A2%E6%80%8E%E4%B9%88%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<ul>
<li><p>红色警告信息：</p>
</li>
<li><p>终端运行如下指令</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /opt/ros/noetic/lib/python3/dist-packages/roslaunch/nodeprocess.py </span><br></pre></td></tr></table></figure>
<p>  将其中的<code>_TIMEOUT_SIGINT</code>后缀的数字15，修改为更短的时间即可</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Ubuntu删除应用</title>
    <url>/2025/01/13/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Ubuntu%E5%88%A0%E9%99%A4%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h1 id="从-Ubuntu-系统中卸载-ImageMagick-及相关依赖"><a href="#从-Ubuntu-系统中卸载-ImageMagick-及相关依赖" class="headerlink" title="从 Ubuntu 系统中卸载 ImageMagick 及相关依赖"></a>从 Ubuntu 系统中卸载 <code>ImageMagick</code> 及相关依赖</h1><p>在某些情况下，系统中可能安装了 <code>ImageMagick</code> 和其他 KDE 或图像处理相关的软件包，而这些应用程序可能不再需要或者是未曾手动安装的。本文记录了如何在 Ubuntu 系统中卸载 <code>ImageMagick</code> 及其相关依赖。</p>
<h2 id="步骤-1：查找并列出-ImageMagick-相关包"><a href="#步骤-1：查找并列出-ImageMagick-相关包" class="headerlink" title="步骤 1：查找并列出 ImageMagick 相关包"></a>步骤 1：查找并列出 <code>ImageMagick</code> 相关包</h2><p>首先，使用以下命令查看系统中已安装的与 <code>ImageMagick</code> 相关的软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg -l | grep -i imagemagick</span><br></pre></td></tr></table></figure>

<p>如果系统中确实安装了 <code>ImageMagick</code>，你将看到类似如下的输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ii  imagemagick-6-common                        8:6.9.10.23+dfsg-2.1ubuntu11.10       all          image manipulation programs -- infrastructure</span><br><span class="line">ii  imagemagick-6.q16                           8:6.9.10.23+dfsg-2.1ubuntu11.10       amd64        image manipulation programs -- quantum depth Q16</span><br><span class="line">ii  libmagick++-6.q16-8:amd64                   8:6.9.10.23+dfsg-2.1ubuntu11.10       amd64        C++ interface to ImageMagick -- quantum depth Q16</span><br></pre></td></tr></table></figure>

<h2 id="步骤-2：卸载-ImageMagick-相关包"><a href="#步骤-2：卸载-ImageMagick-相关包" class="headerlink" title="步骤 2：卸载 ImageMagick 相关包"></a>步骤 2：卸载 <code>ImageMagick</code> 相关包</h2><p>接下来，使用 <code>apt-get purge</code> 命令卸载上述软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get purge imagemagick-6-common imagemagick-6.q16 libmagick++-6.q16-8</span><br></pre></td></tr></table></figure>

<p>该命令将彻底删除这些包及其相关配置文件。</p>
<h2 id="步骤-3：清理无用的依赖和残留文件"><a href="#步骤-3：清理无用的依赖和残留文件" class="headerlink" title="步骤 3：清理无用的依赖和残留文件"></a>步骤 3：清理无用的依赖和残留文件</h2><p>卸载软件包后，运行以下命令清理不再需要的依赖和残留文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt autoremove --purge</span><br></pre></td></tr></table></figure>

<p>此命令会自动删除那些与 <code>ImageMagick</code> 相关的、已不再需要的依赖包。</p>
<h2 id="步骤-4：更新系统的应用菜单"><a href="#步骤-4：更新系统的应用菜单" class="headerlink" title="步骤 4：更新系统的应用菜单"></a>步骤 4：更新系统的应用菜单</h2><p>为了确保卸载后的应用不再显示在应用程序栏中，可以更新系统的应用菜单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-desktop-database</span><br></pre></td></tr></table></figure>

<h2 id="步骤-5：重启系统"><a href="#步骤-5：重启系统" class="headerlink" title="步骤 5：重启系统"></a>步骤 5：重启系统</h2><p>最后，建议重启系统以确保所有更改生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> reboot</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，你可以从 Ubuntu 系统中成功卸载 <code>ImageMagick</code> 及其相关的所有组件，同时清理系统中的多余依赖和配置文件。这些步骤可以帮助你更好地管理系统中不再需要的应用程序，释放系统空间。</p>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>卸载应用</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Ubuntu配置Picgo+Typora</title>
    <url>/2024/12/23/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Ubuntu%E9%85%8D%E7%BD%AEPicgo+Typora/</url>
    <content><![CDATA[<h2 id="1、AppImage下载与安装"><a href="#1、AppImage下载与安装" class="headerlink" title="1、AppImage下载与安装"></a>1、AppImage下载与安装</h2><ul>
<li><p>从下方链接下载：</p>
<p><a href="https://github.com/Molunerfinn/PicGo/releases/download/v2.4.0-beta.9/PicGo-2.4.0-beta.9.AppImage">https://github.com/Molunerfinn/PicGo/releases/download/v2.4.0-beta.9/PicGo-2.4.0-beta.9.AppImage</a></p>
<p>下载后右键选择允许以应用程序形式打开：</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223131705271.png" alt="image-20241223131705271" style="zoom:50%;" />

<p>设置完成后，右键点击运行，即可弹出小方块，在方块上右键打开主界面：</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223131812517.png" alt="image-20241223131812517" style="zoom:67%;" />

<p>注意先点击“图片上传-阿里云OSS-Default”，切换到自己的配置项，可在左侧PicGo设置中选择展示哪些图床，我选择阿里云，便宜大碗🤪</p>
</li>
</ul>
<h2 id="2、阿里云OSS控制台账号获取"><a href="#2、阿里云OSS控制台账号获取" class="headerlink" title="2、阿里云OSS控制台账号获取"></a>2、阿里云OSS控制台账号获取</h2><ul>
<li><p>参考下方链接操作，获取ID和Key，必须保存一下，仅显示一次！</p>
<p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E9%98%BF%E9%87%8C%E4%BA%91oss">https://picgo.github.io/PicGo-Doc/zh/guide/config.html#%E9%98%BF%E9%87%8C%E4%BA%91oss</a></p>
<p><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223131442808.png" alt="image-20241223131442808"></p>
</li>
<li><p>参考上方链接，配置接下来的OSS-Bucket等信息：</p>
<img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223132115503.png" alt="image-20241223132115503" style="zoom: 67%;" />

<p>确认完成后，返回主界面可以测试一下上传是否成功即可。</p>
</li>
</ul>
<h2 id="3、Typora安装与配置"><a href="#3、Typora安装与配置" class="headerlink" title="3、Typora安装与配置"></a>3、Typora安装与配置</h2><ul>
<li><p>安装：最后一版免费Typora，感谢鱼香ROS大佬保存！</p>
<p><a href="https://fishros.org.cn/forum/topic/23/%E5%AE%89%E8%A3%85typora%E6%9C%80%E5%90%8E%E7%9A%84%E5%85%8D%E8%B4%B9%E7%89%88">https://fishros.org.cn/forum/topic/23/%E5%AE%89%E8%A3%85typora%E6%9C%80%E5%90%8E%E7%9A%84%E5%85%8D%E8%B4%B9%E7%89%88</a></p>
</li>
<li><p>打开Typora，点击：文件-偏好设置-图像，如下图所示：</p>
<p><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223132432287.png" alt="image-20241223132432287"></p>
</li>
<li><p>选择配置如上图所示，上传服务选择Core，然后点击下载（需要网络），下载完成后点击“打开配置文件”，复制上方安装的PicGo中的配置信息，完全粘贴到刚刚打开的配置文件中，保存</p>
<p><img src="https://markdown-zyh.oss-cn-beijing.aliyuncs.com/picgo/image-20241223132635641.png" alt="image-20241223132635641"></p>
</li>
<li><p>修改后，点击“验证图片上传选项”，测试成功即可！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Picgo</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】Ubuntu音频切换失败解决方案</title>
    <url>/2025/01/13/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91Ubuntu%E9%9F%B3%E9%A2%91%E5%88%87%E6%8D%A2%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>如果Ubuntu没有声音输出，可以尝试以下几种解决方法：</p>
<ol>
<li>检查音量设置：确保音量没有被静音或调到最低。点击系统菜单栏上的音量图标，调整音量设置。</li>
<li>检查音频设备连接：确保音频设备（例如扬声器、耳机等）已正确连接到计算机，并且没有松动或断开。</li>
<li>检查音频输出设备设置：点击系统菜单栏上的音量图标，选择“Sound Settings”（声音设置），在“Output”（输出）选项卡中，确保选择了正确的音频输出设备。</li>
<li>更新驱动程序：打开终端，运行以下命令更新系统的软件包和驱动程序：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>

<h2 id="1、重启-PulseAudio-服务："><a href="#1、重启-PulseAudio-服务：" class="headerlink" title="1、重启 PulseAudio 服务："></a>1、重启 PulseAudio 服务：</h2><p>在终端中运行以下命令以重启 PulseAudio 服务：（本人尝试这个方法后成功切换）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pulseaudio -k</span><br></pre></td></tr></table></figure>

<ul>
<li>然后，重启电脑，看看是否有声音输出（重启电脑这一步我没有操作，可自行看是否需要重启电脑）</li>
</ul>
<h2 id="2、检查默认音频设备："><a href="#2、检查默认音频设备：" class="headerlink" title="2、检查默认音频设备："></a>2、检查默认音频设备：</h2><p>打开终端，运行以下命令以查看默认音频设备：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aplay -l</span><br></pre></td></tr></table></figure>

<p>然后，编辑 PulseAudio 配置文件，运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/pulse/default.pa</span><br></pre></td></tr></table></figure>

<p>找到以下行并取消注释（删除行前的“#”符号）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">load-module module-alsa-sink device=&lt;默认音频设备&gt;</span><br></pre></td></tr></table></figure>

<p>将 <code>&lt;默认音频设备&gt;</code> 替换为 <code>aplay -l</code> 命令中显示的默认音频设备的标识符。保存文件并重启电脑。</p>
<h2 id="3、安装和配置-ALSA-驱动程序："><a href="#3、安装和配置-ALSA-驱动程序：" class="headerlink" title="3、安装和配置 ALSA 驱动程序："></a>3、安装和配置 ALSA 驱动程序：</h2><p>打开终端，运行以下命令以安装 ALSA 驱动程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install alsa-utils</span><br></pre></td></tr></table></figure>

<p>然后，运行以下命令以配置 ALSA 驱动程序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo alsa force-reload</span><br></pre></td></tr></table></figure>

<p>重启电脑后，看看是否有声音输出。</p>
<p>如果上述方法仍然无法解决问题，可能需要更深入的故障排除或考虑使用其他音频设备。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.yisu.com/ask/26427066.html</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Ubuntu</tag>
        <tag>音频切换</tag>
      </tags>
  </entry>
  <entry>
    <title>【技能学习】迁移Blogs到其他Ubuntu系统.md</title>
    <url>/2025/02/24/%E3%80%90%E6%8A%80%E8%83%BD%E5%AD%A6%E4%B9%A0%E3%80%91%E8%BF%81%E7%A7%BBBlogs%E5%88%B0%E5%85%B6%E4%BB%96Ubuntu%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="1、问题描述"><a href="#1、问题描述" class="headerlink" title="1、问题描述"></a>1、问题描述</h2><p>在 Ubuntu 旧环境下，博客文件夹位于 <code>/home/zhao/Blog</code>，该目录已连接到 GitHub 仓库，并包含 Hexo 相关的配置文件和依赖。希望在 <strong>新 Ubuntu 系统</strong> 下重建该博客环境，并确保与 GitHub 仓库保持同步。然而，在执行 <code>hexo</code> 相关命令时遇到了一些问题，主要包括：</p>
<ol>
<li><code>.gitignore</code> 配置可能导致部分文件未被同步。</li>
<li><code>npx hexo generate</code> 报错 <code>TypeError: Object.fromEntries is not a function</code>，怀疑是 <strong>Node.js 版本过旧</strong>。</li>
<li><code>hexo clean</code> 报错 <code>Command &#39;hexo&#39; not found</code>，怀疑是 <strong>Hexo 未全局安装</strong>。</li>
</ol>
<hr>
<h2 id="2、问题分析与解决方案"><a href="#2、问题分析与解决方案" class="headerlink" title="2、问题分析与解决方案"></a>2、问题分析与解决方案</h2><h3 id="2-1-gitignore-配置检查"><a href="#2-1-gitignore-配置检查" class="headerlink" title="2.1 .gitignore 配置检查"></a><strong>2.1 .gitignore 配置检查</strong></h3><p>在 <code>.gitignore</code> 文件中，以下内容可能影响同步：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.DS_Store</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Thumbs.db</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">db.json</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">*.<span class="built_in">log</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">node_modules/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">public/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">.deploy*/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">_multiconfig.yml</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>node_modules/</code> 和 <code>public/</code> 目录可以忽略，因为它们可以通过 <code>npm install</code> 和 <code>hexo generate</code> 重新生成。</li>
<li><code>db.json</code> 可能包含 Hexo 的数据缓存，忽略它不会影响博客功能。</li>
</ul>
<p><strong>结论</strong>：<code>.gitignore</code> 并未影响关键文件的同步，因此问题可能出现在 Node.js 版本或 Hexo 安装上。</p>
<hr>
<h3 id="2-2-解决-Node-js-版本过旧问题"><a href="#2-2-解决-Node-js-版本过旧问题" class="headerlink" title="2.2 解决 Node.js 版本过旧问题"></a><strong>2.2 解决 Node.js 版本过旧问题</strong></h3><p><strong>错误信息：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">TypeError: Object.fromEntries is not a function</span><br></pre></td></tr></table></figure>

<p><strong>原因：</strong> <code>Object.fromEntries</code> 需要 Node.js 12+，而旧版本 Node.js 可能低于 12.0.0。</p>
<p><strong>解决方案：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查当前 Node.js 版本</span></span><br><span class="line">node -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 Node.js（推荐使用官方 PPA）</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install -y curl</span><br><span class="line">curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -</span><br><span class="line">sudo apt install -y nodejs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保安装成功</span></span><br><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-3-解决-Hexo-未全局安装问题"><a href="#2-3-解决-Hexo-未全局安装问题" class="headerlink" title="2.3 解决 Hexo 未全局安装问题"></a><strong>2.3 解决 Hexo 未全局安装问题</strong></h3><p><strong>错误信息：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Command &#x27;hexo&#x27; not found</span><br></pre></td></tr></table></figure>

<p><strong>原因：</strong> Hexo 可能只作为 <strong>本地依赖</strong> 存在于 <code>node_modules/</code> 目录中，而没有全局安装。</p>
<p><strong>解决方案 1（推荐）：使用 <code>npx</code> 运行 Hexo</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx hexo clean</span><br><span class="line">npx hexo generate</span><br><span class="line">npx hexo server</span><br></pre></td></tr></table></figure>

<p><strong>解决方案 2（可选）：全局安装 Hexo</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">确保安装成功</span></span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="3、完整的博客环境恢复步骤"><a href="#3、完整的博客环境恢复步骤" class="headerlink" title="3、完整的博客环境恢复步骤"></a>3、完整的博客环境恢复步骤</h2><ol>
<li><strong>安装 Node.js 和 npm</strong>（参考 2.2 章节）。</li>
<li><strong>进入博客目录</strong> 并安装依赖： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /home/zhao/Blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
<li><strong>清理缓存并重新生成博客</strong>： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li>
<li><strong>本地访问博客</strong>：<br> 在浏览器中打开 <code>http://localhost:4000</code>，检查博客是否正常显示。</li>
<li><strong>同步 GitHub 远程仓库（可选）</strong>： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git remote -v  # 确保远程仓库正确</span><br><span class="line">git pull origin main  # 拉取最新代码</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h2><p>在新 Ubuntu 系统下迁移 Hexo 博客时，可能会遇到 <strong>Node.js 版本过旧</strong> 和 <strong>Hexo 未全局安装</strong> 的问题。通过升级 Node.js、安装 Hexo 依赖以及正确执行 Hexo 命令，可以成功恢复博客环境并同步 GitHub 仓库。</p>
<p>至此，Hexo 博客已成功在新系统下恢复并可正常使用！🎉</p>
]]></content>
      <categories>
        <category>技能学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>Blogs</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【知识补充】卡尔曼滤波相关问题</title>
    <url>/2024/12/23/%E3%80%90%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85%E3%80%91%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<ul>
<li>卡尔曼滤波 Kalman Filter 之美在于什么？ - 自动驾驶之心的回答 - 知乎<br><a href="https://www.zhihu.com/question/281995386/answer/3371567219">https://www.zhihu.com/question/281995386/answer/3371567219</a></li>
</ul>
]]></content>
      <categories>
        <category>知识补充</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>卡尔曼滤波</tag>
      </tags>
  </entry>
  <entry>
    <title>【系统修复】Ubuntu20.04解决关机慢问题</title>
    <url>/2024/12/26/%E3%80%90%E7%B3%BB%E7%BB%9F%E4%BF%AE%E5%A4%8D%E3%80%91Ubuntu20.04%E8%A7%A3%E5%86%B3%E5%85%B3%E6%9C%BA%E6%85%A2%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="1、问题描述："><a href="#1、问题描述：" class="headerlink" title="1、问题描述："></a>1、问题描述：</h2><p>Linux：关机慢等待 90 秒提示 a stop job is running for XXX</p>
<h2 id="2、解决方法："><a href="#2、解决方法：" class="headerlink" title="2、解决方法："></a>2、解决方法：</h2><ul>
<li>编辑配置文件：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/systemd/system.conf</span><br></pre></td></tr></table></figure>
  修改以下两个参数，比如改为 5s  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DefaultTimeoutStartSec=5s</span><br><span class="line">DefaultTimeoutStopSec=5s</span><br></pre></td></tr></table></figure></li>
<li>重启服务：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>系统修复</category>
      </categories>
      <tags>
        <tag>Ubuntu20.04</tag>
        <tag>关机</tag>
      </tags>
  </entry>
</search>
